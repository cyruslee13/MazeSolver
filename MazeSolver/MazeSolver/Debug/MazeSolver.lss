
MazeSolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800100  00800100  0000096c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100e  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ef  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a76  00000000  00000000  00002379  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000539  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000753  00000000  00000000  000034a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 33       	cpi	r26, 0x32	; 50
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b1 02 	call	0x562	; 0x562 <main>
  88:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <motors_init>:
		}
	}
	else if(first == 'R' && second == 'L'){
		return 'U';
	}
}
  90:	83 ef       	ldi	r24, 0xF3	; 243
  92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  96:	84 bd       	out	0x24, r24	; 36
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  9e:	85 bd       	out	0x25, r24	; 37
  a0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
  a4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  a8:	18 bc       	out	0x28, r1	; 40
  aa:	17 bc       	out	0x27, r1	; 39
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	88 66       	ori	r24, 0x68	; 104
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	23 9a       	sbi	0x04, 3	; 4
  b4:	08 95       	ret

000000b6 <delay_ms>:
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	69 f0       	breq	.+26     	; 0xd4 <delay_ms+0x1e>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	e7 e8       	ldi	r30, 0x87	; 135
  c0:	f3 e1       	ldi	r31, 0x13	; 19
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <delay_ms+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <delay_ms+0x12>
  c8:	00 00       	nop
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	a9 f7       	brne	.-22     	; 0xbe <delay_ms+0x8>
  d4:	08 95       	ret

000000d6 <turnLeft>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	18 bc       	out	0x28, r1	; 40
  dc:	c4 eb       	ldi	r28, 0xB4	; 180
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	18 82       	st	Y, r1
  e2:	89 e1       	ldi	r24, 0x19	; 25
  e4:	87 bd       	out	0x27, r24	; 39
  e6:	88 83       	st	Y, r24
  e8:	8f ed       	ldi	r24, 0xDF	; 223
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
  f0:	17 bc       	out	0x27, r1	; 39
  f2:	18 82       	st	Y, r1
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <turnRight>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	18 bc       	out	0x28, r1	; 40
 100:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 104:	89 e1       	ldi	r24, 0x19	; 25
 106:	88 bd       	out	0x28, r24	; 40
 108:	c3 eb       	ldi	r28, 0xB3	; 179
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	88 83       	st	Y, r24
 10e:	8f ed       	ldi	r24, 0xDF	; 223
 110:	92 e0       	ldi	r25, 0x02	; 2
 112:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
 116:	18 bc       	out	0x28, r1	; 40
 118:	18 82       	st	Y, r1
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <read_sensors>:
 120:	ec e2       	ldi	r30, 0x2C	; 44
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	85 81       	ldd	r24, Z+5	; 0x05
 126:	10 82       	st	Z, r1
 128:	11 82       	std	Z+1, r1	; 0x01
 12a:	12 82       	std	Z+2, r1	; 0x02
 12c:	13 82       	std	Z+3, r1	; 0x03
 12e:	14 82       	std	Z+4, r1	; 0x04
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	87 b9       	out	0x07, r24	; 7
 134:	18 b8       	out	0x08, r1	; 8
 136:	8f e1       	ldi	r24, 0x1F	; 31
 138:	88 b9       	out	0x08, r24	; 8
 13a:	82 e4       	ldi	r24, 0x42	; 66
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <read_sensors+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <read_sensors+0x22>
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	88 b9       	out	0x08, r24	; 8
 146:	87 b9       	out	0x07, r24	; 7
 148:	8e e5       	ldi	r24, 0x5E	; 94
 14a:	95 e0       	ldi	r25, 0x05	; 5
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <read_sensors+0x2c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <read_sensors+0x32>
 152:	00 00       	nop
 154:	86 b1       	in	r24, 0x06	; 6
 156:	98 2f       	mov	r25, r24
 158:	91 70       	andi	r25, 0x01	; 1
 15a:	90 83       	st	Z, r25
 15c:	81 fb       	bst	r24, 1
 15e:	99 27       	eor	r25, r25
 160:	90 f9       	bld	r25, 0
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	82 fb       	bst	r24, 2
 166:	99 27       	eor	r25, r25
 168:	90 f9       	bld	r25, 0
 16a:	92 83       	std	Z+2, r25	; 0x02
 16c:	83 fb       	bst	r24, 3
 16e:	99 27       	eor	r25, r25
 170:	90 f9       	bld	r25, 0
 172:	93 83       	std	Z+3, r25	; 0x03
 174:	82 95       	swap	r24
 176:	81 70       	andi	r24, 0x01	; 1
 178:	84 83       	std	Z+4, r24	; 0x04
 17a:	08 95       	ret

0000017c <inch>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	87 e1       	ldi	r24, 0x17	; 23
 182:	88 bd       	out	0x28, r24	; 40
 184:	c4 eb       	ldi	r28, 0xB4	; 180
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	89 e1       	ldi	r24, 0x19	; 25
 18a:	88 83       	st	Y, r24
 18c:	82 ec       	ldi	r24, 0xC2	; 194
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
 194:	0e 94 90 00 	call	0x120	; 0x120 <read_sensors>
 198:	18 bc       	out	0x28, r1	; 40
 19a:	18 82       	st	Y, r1
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <quarterInch>:
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	87 e1       	ldi	r24, 0x17	; 23
 1a8:	88 bd       	out	0x28, r24	; 40
 1aa:	c4 eb       	ldi	r28, 0xB4	; 180
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	89 e1       	ldi	r24, 0x19	; 25
 1b0:	88 83       	st	Y, r24
 1b2:	80 e7       	ldi	r24, 0x70	; 112
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
 1ba:	0e 94 90 00 	call	0x120	; 0x120 <read_sensors>
 1be:	18 bc       	out	0x28, r1	; 40
 1c0:	18 82       	st	Y, r1
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <trackLine>:
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	6b 01       	movw	r12, r22
 1d2:	7c 01       	movw	r14, r24
 1d4:	87 e1       	ldi	r24, 0x17	; 23
 1d6:	88 bd       	out	0x28, r24	; 40
 1d8:	89 e1       	ldi	r24, 0x19	; 25
 1da:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 1de:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 1e2:	88 23       	and	r24, r24
 1e4:	99 f0       	breq	.+38     	; 0x20c <trackLine+0x44>
 1e6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 1ea:	81 11       	cpse	r24, r1
 1ec:	12 c0       	rjmp	.+36     	; 0x212 <trackLine+0x4a>
 1ee:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 1f2:	81 11       	cpse	r24, r1
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <trackLine+0x50>
 1f6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 1fa:	81 11       	cpse	r24, r1
 1fc:	10 c0       	rjmp	.+32     	; 0x21e <trackLine+0x56>
 1fe:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 202:	81 11       	cpse	r24, r1
 204:	0f c0       	rjmp	.+30     	; 0x224 <trackLine+0x5c>
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e c0       	rjmp	.+28     	; 0x228 <trackLine+0x60>
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	0b c0       	rjmp	.+22     	; 0x228 <trackLine+0x60>
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	08 c0       	rjmp	.+16     	; 0x228 <trackLine+0x60>
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	05 c0       	rjmp	.+10     	; 0x228 <trackLine+0x60>
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <trackLine+0x60>
 224:	64 e0       	ldi	r22, 0x04	; 4
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 22c:	88 23       	and	r24, r24
 22e:	a9 f0       	breq	.+42     	; 0x25a <trackLine+0x92>
 230:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 234:	81 11       	cpse	r24, r1
 236:	11 c0       	rjmp	.+34     	; 0x25a <trackLine+0x92>
 238:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 23c:	81 11       	cpse	r24, r1
 23e:	0d c0       	rjmp	.+26     	; 0x25a <trackLine+0x92>
 240:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 244:	81 11       	cpse	r24, r1
 246:	09 c0       	rjmp	.+18     	; 0x25a <trackLine+0x92>
 248:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 24c:	81 11       	cpse	r24, r1
 24e:	03 c0       	rjmp	.+6      	; 0x256 <trackLine+0x8e>
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <trackLine+0x92>
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 25e:	88 23       	and	r24, r24
 260:	91 f0       	breq	.+36     	; 0x286 <trackLine+0xbe>
 262:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 266:	81 11       	cpse	r24, r1
 268:	0e c0       	rjmp	.+28     	; 0x286 <trackLine+0xbe>
 26a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 26e:	81 11       	cpse	r24, r1
 270:	0a c0       	rjmp	.+20     	; 0x286 <trackLine+0xbe>
 272:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 276:	81 11       	cpse	r24, r1
 278:	06 c0       	rjmp	.+12     	; 0x286 <trackLine+0xbe>
 27a:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <lightDarkBits+0x3>
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	71 95       	neg	r23
 282:	61 95       	neg	r22
 284:	71 09       	sbc	r23, r1
 286:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 28a:	88 23       	and	r24, r24
 28c:	99 f0       	breq	.+38     	; 0x2b4 <trackLine+0xec>
 28e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 292:	81 11       	cpse	r24, r1
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <trackLine+0xec>
 296:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 29a:	81 11       	cpse	r24, r1
 29c:	0b c0       	rjmp	.+22     	; 0x2b4 <trackLine+0xec>
 29e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 2a2:	81 11       	cpse	r24, r1
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <trackLine+0xec>
 2a6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 2aa:	81 11       	cpse	r24, r1
 2ac:	60 c0       	rjmp	.+192    	; 0x36e <trackLine+0x1a6>
 2ae:	6e ef       	ldi	r22, 0xFE	; 254
 2b0:	7f ef       	ldi	r23, 0xFF	; 255
 2b2:	5f c0       	rjmp	.+190    	; 0x372 <trackLine+0x1aa>
 2b4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 2b8:	88 23       	and	r24, r24
 2ba:	89 f0       	breq	.+34     	; 0x2de <trackLine+0x116>
 2bc:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 2c0:	81 11       	cpse	r24, r1
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <trackLine+0x116>
 2c4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 2c8:	81 11       	cpse	r24, r1
 2ca:	09 c0       	rjmp	.+18     	; 0x2de <trackLine+0x116>
 2cc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 2d0:	81 11       	cpse	r24, r1
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <trackLine+0x116>
 2d4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 2d8:	88 23       	and	r24, r24
 2da:	09 f4       	brne	.+2      	; 0x2de <trackLine+0x116>
 2dc:	4f c0       	rjmp	.+158    	; 0x37c <trackLine+0x1b4>
 2de:	61 15       	cp	r22, r1
 2e0:	71 05       	cpc	r23, r1
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <trackLine+0x128>
 2e4:	87 e1       	ldi	r24, 0x17	; 23
 2e6:	88 bd       	out	0x28, r24	; 40
 2e8:	89 e1       	ldi	r24, 0x19	; 25
 2ea:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 2ee:	5d c0       	rjmp	.+186    	; 0x3aa <trackLine+0x1e2>
 2f0:	07 2e       	mov	r0, r23
 2f2:	00 0c       	add	r0, r0
 2f4:	88 0b       	sbc	r24, r24
 2f6:	99 0b       	sbc	r25, r25
 2f8:	0e 94 81 03 	call	0x702	; 0x702 <__floatsisf>
 2fc:	a7 01       	movw	r20, r14
 2fe:	96 01       	movw	r18, r12
 300:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__mulsf3>
 304:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
 308:	6a 31       	cpi	r22, 0x1A	; 26
 30a:	71 05       	cpc	r23, r1
 30c:	14 f0       	brlt	.+4      	; 0x312 <trackLine+0x14a>
 30e:	69 e1       	ldi	r22, 0x19	; 25
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	67 3e       	cpi	r22, 0xE7	; 231
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	78 07       	cpc	r23, r24
 318:	14 f4       	brge	.+4      	; 0x31e <trackLine+0x156>
 31a:	67 ee       	ldi	r22, 0xE7	; 231
 31c:	7f ef       	ldi	r23, 0xFF	; 255
 31e:	9b 01       	movw	r18, r22
 320:	27 5e       	subi	r18, 0xE7	; 231
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	87 e1       	ldi	r24, 0x17	; 23
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	86 1b       	sub	r24, r22
 32a:	97 0b       	sbc	r25, r23
 32c:	89 3c       	cpi	r24, 0xC9	; 201
 32e:	91 05       	cpc	r25, r1
 330:	10 f0       	brcs	.+4      	; 0x336 <trackLine+0x16e>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	88 bd       	out	0x28, r24	; 40
 338:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 33c:	36 c0       	rjmp	.+108    	; 0x3aa <trackLine+0x1e2>
 33e:	07 2e       	mov	r0, r23
 340:	00 0c       	add	r0, r0
 342:	88 0b       	sbc	r24, r24
 344:	99 0b       	sbc	r25, r25
 346:	0e 94 81 03 	call	0x702	; 0x702 <__floatsisf>
 34a:	a7 01       	movw	r20, r14
 34c:	96 01       	movw	r18, r12
 34e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__mulsf3>
 352:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
 356:	6a 31       	cpi	r22, 0x1A	; 26
 358:	71 05       	cpc	r23, r1
 35a:	14 f0       	brlt	.+4      	; 0x360 <trackLine+0x198>
 35c:	69 e1       	ldi	r22, 0x19	; 25
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	67 3e       	cpi	r22, 0xE7	; 231
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	78 07       	cpc	r23, r24
 366:	dc f6       	brge	.-74     	; 0x31e <trackLine+0x156>
 368:	67 ee       	ldi	r22, 0xE7	; 231
 36a:	7f ef       	ldi	r23, 0xFF	; 255
 36c:	d8 cf       	rjmp	.-80     	; 0x31e <trackLine+0x156>
 36e:	6c ef       	ldi	r22, 0xFC	; 252
 370:	7f ef       	ldi	r23, 0xFF	; 255
 372:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 376:	88 23       	and	r24, r24
 378:	11 f3       	breq	.-60     	; 0x33e <trackLine+0x176>
 37a:	a0 cf       	rjmp	.-192    	; 0x2bc <trackLine+0xf4>
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 ea       	ldi	r20, 0xA0	; 160
 382:	50 ec       	ldi	r21, 0xC0	; 192
 384:	c7 01       	movw	r24, r14
 386:	b6 01       	movw	r22, r12
 388:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__mulsf3>
 38c:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
 390:	6a 31       	cpi	r22, 0x1A	; 26
 392:	71 05       	cpc	r23, r1
 394:	14 f0       	brlt	.+4      	; 0x39a <trackLine+0x1d2>
 396:	69 e1       	ldi	r22, 0x19	; 25
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	67 3e       	cpi	r22, 0xE7	; 231
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	78 07       	cpc	r23, r24
 3a0:	0c f0       	brlt	.+2      	; 0x3a4 <trackLine+0x1dc>
 3a2:	bd cf       	rjmp	.-134    	; 0x31e <trackLine+0x156>
 3a4:	67 ee       	ldi	r22, 0xE7	; 231
 3a6:	7f ef       	ldi	r23, 0xFF	; 255
 3a8:	ba cf       	rjmp	.-140    	; 0x31e <trackLine+0x156>
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	08 95       	ret

000003b4 <detectIntersection>:
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	18 bc       	out	0x28, r1	; 40
 3ba:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 3be:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <quarterInch>
 3c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 3c6:	88 23       	and	r24, r24
 3c8:	49 f1       	breq	.+82     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ca:	c0 91 30 01 	lds	r28, 0x0130	; 0x800130 <lightDarkBits+0x4>
 3ce:	c1 11       	cpse	r28, r1
 3d0:	25 c0       	rjmp	.+74     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3d2:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
 3d6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 3da:	81 11       	cpse	r24, r1
 3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <detectIntersection+0x42>
 3de:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 3e2:	81 11       	cpse	r24, r1
 3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <detectIntersection+0x42>
 3e6:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <lightDarkBits+0x3>
 3ea:	d1 11       	cpse	r29, r1
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <detectIntersection+0x42>
 3ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 3f2:	cd 2f       	mov	r28, r29
 3f4:	69 c0       	rjmp	.+210    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 3fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 402:	9c 01       	movw	r18, r24
 404:	2f 5f       	subi	r18, 0xFF	; 255
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 40c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 410:	fc 01       	movw	r30, r24
 412:	e4 5f       	subi	r30, 0xF4	; 244
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	2c e4       	ldi	r18, 0x4C	; 76
 418:	20 83       	st	Z, r18
 41a:	56 c0       	rjmp	.+172    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 41c:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <lightDarkBits>
 420:	c1 11       	cpse	r28, r1
 422:	29 c0       	rjmp	.+82     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 424:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 428:	88 23       	and	r24, r24
 42a:	29 f1       	breq	.+74     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 42c:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
 430:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 434:	81 11       	cpse	r24, r1
 436:	0c c0       	rjmp	.+24     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 438:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 43c:	81 11       	cpse	r24, r1
 43e:	08 c0       	rjmp	.+16     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 440:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <lightDarkBits+0x3>
 444:	d1 11       	cpse	r29, r1
 446:	04 c0       	rjmp	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 448:	0e 94 7d 00 	call	0xfa	; 0xfa <turnRight>
 44c:	cd 2f       	mov	r28, r29
 44e:	3c c0       	rjmp	.+120    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 450:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <quarterInch>
 454:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 458:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 45c:	9c 01       	movw	r18, r24
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 466:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 46a:	fc 01       	movw	r30, r24
 46c:	e4 5f       	subi	r30, 0xF4	; 244
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	23 e5       	ldi	r18, 0x53	; 83
 472:	20 83       	st	Z, r18
 474:	29 c0       	rjmp	.+82     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 476:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
 47a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 47e:	88 23       	and	r24, r24
 480:	81 f0       	breq	.+32     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 482:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 486:	88 23       	and	r24, r24
 488:	61 f0       	breq	.+24     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 48a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 48e:	88 23       	and	r24, r24
 490:	41 f0       	breq	.+16     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 492:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 496:	88 23       	and	r24, r24
 498:	21 f0       	breq	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49a:	c0 91 30 01 	lds	r28, 0x0130	; 0x800130 <lightDarkBits+0x4>
 49e:	c1 11       	cpse	r28, r1
 4a0:	13 c0       	rjmp	.+38     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 4a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4ae:	9c 01       	movw	r18, r24
 4b0:	2f 5f       	subi	r18, 0xFF	; 255
 4b2:	3f 4f       	sbci	r19, 0xFF	; 255
 4b4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 4b8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 4bc:	fc 01       	movw	r30, r24
 4be:	e4 5f       	subi	r30, 0xF4	; 244
 4c0:	fe 4f       	sbci	r31, 0xFE	; 254
 4c2:	2c e4       	ldi	r18, 0x4C	; 76
 4c4:	20 83       	st	Z, r18
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	8c 2f       	mov	r24, r28
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <uturn>:
 4d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 4d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 4d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4e0:	9c 01       	movw	r18, r24
 4e2:	2f 5f       	subi	r18, 0xFF	; 255
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 4ea:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 4ee:	fc 01       	movw	r30, r24
 4f0:	e4 5f       	subi	r30, 0xF4	; 244
 4f2:	fe 4f       	sbci	r31, 0xFE	; 254
 4f4:	25 e5       	ldi	r18, 0x55	; 85
 4f6:	20 83       	st	Z, r18
 4f8:	08 95       	ret

000004fa <shiftPath>:

void shiftPath(){

	for(int i = pathIndex - 1; i >=0; --i){
 4fa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 4fe:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 502:	61 50       	subi	r22, 0x01	; 1
 504:	71 09       	sbc	r23, r1
 506:	62 f1       	brmi	.+88     	; 0x560 <shiftPath+0x66>
		if(path[i] = 'e'){
 508:	a5 e6       	ldi	r26, 0x65	; 101
 50a:	fb 01       	movw	r30, r22
 50c:	e4 5f       	subi	r30, 0xF4	; 244
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	a0 83       	st	Z, r26
			for(int j = i; j < pathIndex; ++j){
 512:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 516:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 51a:	68 17       	cp	r22, r24
 51c:	79 07       	cpc	r23, r25
 51e:	a4 f4       	brge	.+40     	; 0x548 <shiftPath+0x4e>
 520:	cb 01       	movw	r24, r22
				path[j] = path[j+1];
 522:	9c 01       	movw	r18, r24
 524:	2f 5f       	subi	r18, 0xFF	; 255
 526:	3f 4f       	sbci	r19, 0xFF	; 255
 528:	f9 01       	movw	r30, r18
 52a:	e4 5f       	subi	r30, 0xF4	; 244
 52c:	fe 4f       	sbci	r31, 0xFE	; 254
 52e:	40 81       	ld	r20, Z
 530:	fc 01       	movw	r30, r24
 532:	e4 5f       	subi	r30, 0xF4	; 244
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	40 83       	st	Z, r20

void shiftPath(){

	for(int i = pathIndex - 1; i >=0; --i){
		if(path[i] = 'e'){
			for(int j = i; j < pathIndex; ++j){
 538:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 53c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 540:	c9 01       	movw	r24, r18
 542:	24 17       	cp	r18, r20
 544:	35 07       	cpc	r19, r21
 546:	6c f3       	brlt	.-38     	; 0x522 <shiftPath+0x28>
				path[j] = path[j+1];
			}
			--pathIndex;
 548:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 54c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 556:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}

void shiftPath(){

	for(int i = pathIndex - 1; i >=0; --i){
 55a:	61 50       	subi	r22, 0x01	; 1
 55c:	71 09       	sbc	r23, r1
 55e:	a8 f6       	brcc	.-86     	; 0x50a <shiftPath+0x10>
 560:	08 95       	ret

00000562 <main>:

bool notButtonPress;
int main()
{
	// Initialize motors
	motors_init();
 562:	0e 94 48 00 	call	0x90	; 0x90 <motors_init>
	
	for (int i = 0; i < 30; ++i){//initialize path to empty
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
		path[i] = 'e';
 56a:	25 e6       	ldi	r18, 0x65	; 101
 56c:	fc 01       	movw	r30, r24
 56e:	e4 5f       	subi	r30, 0xF4	; 244
 570:	fe 4f       	sbci	r31, 0xFE	; 254
 572:	20 83       	st	Z, r18
int main()
{
	// Initialize motors
	motors_init();
	
	for (int i = 0; i < 30; ++i){//initialize path to empty
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	8e 31       	cpi	r24, 0x1E	; 30
 578:	91 05       	cpc	r25, r1
 57a:	c1 f7       	brne	.-16     	; 0x56c <main+0xa>
while(1){
		 //Read sensors should return the byte containing whether each sensor was high or low
		read_sensors();
		

		if (lightDarkBits[0] == 1 || lightDarkBits[4] == 1)
 57c:	0c e2       	ldi	r16, 0x2C	; 44
 57e:	11 e0       	ldi	r17, 0x01	; 1

	 //loop here forever to keep the program counter from
	  //running off the end of our program
while(1){
		 //Read sensors should return the byte containing whether each sensor was high or low
		read_sensors();
 580:	0e 94 90 00 	call	0x120	; 0x120 <read_sensors>
		

		if (lightDarkBits[0] == 1 || lightDarkBits[4] == 1)
 584:	f8 01       	movw	r30, r16
 586:	80 81       	ld	r24, Z
 588:	81 11       	cpse	r24, r1
 58a:	03 c0       	rjmp	.+6      	; 0x592 <main+0x30>
 58c:	84 81       	ldd	r24, Z+4	; 0x04
 58e:	88 23       	and	r24, r24
 590:	79 f0       	breq	.+30     	; 0x5b0 <main+0x4e>
		{
			if(detectIntersection()){
 592:	0e 94 da 01 	call	0x3b4	; 0x3b4 <detectIntersection>
 596:	81 11       	cpse	r24, r1
 598:	31 c0       	rjmp	.+98     	; 0x5fc <main+0x9a>
 59a:	c8 eb       	ldi	r28, 0xB8	; 184
 59c:	db e0       	ldi	r29, 0x0B	; 11
				break;
			}
			
			for(int i = 0; i < 3000; ++i){
				trackLine(25);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	88 ec       	ldi	r24, 0xC8	; 200
 5a4:	91 e4       	ldi	r25, 0x41	; 65
 5a6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <trackLine>
 5aa:	21 97       	sbiw	r28, 0x01	; 1
		{
			if(detectIntersection()){
				break;
			}
			
			for(int i = 0; i < 3000; ++i){
 5ac:	c1 f7       	brne	.-16     	; 0x59e <main+0x3c>
 5ae:	e8 cf       	rjmp	.-48     	; 0x580 <main+0x1e>
				trackLine(25);
			}
		}
		else if(lightDarkBits[0] == 0 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0)
 5b0:	f8 01       	movw	r30, r16
 5b2:	80 81       	ld	r24, Z
 5b4:	81 11       	cpse	r24, r1
 5b6:	1b c0       	rjmp	.+54     	; 0x5ee <main+0x8c>
 5b8:	81 81       	ldd	r24, Z+1	; 0x01
 5ba:	81 11       	cpse	r24, r1
 5bc:	18 c0       	rjmp	.+48     	; 0x5ee <main+0x8c>
 5be:	82 81       	ldd	r24, Z+2	; 0x02
 5c0:	81 11       	cpse	r24, r1
 5c2:	15 c0       	rjmp	.+42     	; 0x5ee <main+0x8c>
 5c4:	83 81       	ldd	r24, Z+3	; 0x03
 5c6:	81 11       	cpse	r24, r1
 5c8:	12 c0       	rjmp	.+36     	; 0x5ee <main+0x8c>
 5ca:	84 81       	ldd	r24, Z+4	; 0x04
 5cc:	81 11       	cpse	r24, r1
 5ce:	0f c0       	rjmp	.+30     	; 0x5ee <main+0x8c>
		{
			inch();
 5d0:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
			uturn();
 5d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uturn>
 5d8:	c8 eb       	ldi	r28, 0xB8	; 184
 5da:	db e0       	ldi	r29, 0x0B	; 11
			for(int i = 0; i < 3000; ++i){
				trackLine(25);
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	88 ec       	ldi	r24, 0xC8	; 200
 5e2:	91 e4       	ldi	r25, 0x41	; 65
 5e4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <trackLine>
 5e8:	21 97       	sbiw	r28, 0x01	; 1
		}
		else if(lightDarkBits[0] == 0 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0)
		{
			inch();
			uturn();
			for(int i = 0; i < 3000; ++i){
 5ea:	c1 f7       	brne	.-16     	; 0x5dc <main+0x7a>
 5ec:	c9 cf       	rjmp	.-110    	; 0x580 <main+0x1e>
				trackLine(25);
			}
		}
		else
		{
			trackLine(7);
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	80 ee       	ldi	r24, 0xE0	; 224
 5f4:	90 e4       	ldi	r25, 0x40	; 64
 5f6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <trackLine>
 5fa:	c2 cf       	rjmp	.-124    	; 0x580 <main+0x1e>
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
 5fc:	01 e0       	ldi	r16, 0x01	; 1
				if(path[i] == 'U'){
					isDone = false;
 5fe:	10 e0       	ldi	r17, 0x00	; 0
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
 600:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <_edata>
 604:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <_edata+0x1>
 608:	21 97       	sbiw	r28, 0x01	; 1
 60a:	d2 f0       	brmi	.+52     	; 0x640 <main+0xde>
 60c:	90 2f       	mov	r25, r16
				if(path[i] == 'U'){
 60e:	fe 01       	movw	r30, r28
 610:	e4 5f       	subi	r30, 0xF4	; 244
 612:	fe 4f       	sbci	r31, 0xFE	; 254
 614:	80 81       	ld	r24, Z
 616:	85 35       	cpi	r24, 0x55	; 85
 618:	79 f4       	brne	.+30     	; 0x638 <main+0xd6>
					isDone = false;
					path[i] == simplifyPath(path[i -1], path[i + 1]);
 61a:	fe 01       	movw	r30, r28
 61c:	e4 5f       	subi	r30, 0xF4	; 244
 61e:	fe 4f       	sbci	r31, 0xFE	; 254
 620:	80 81       	ld	r24, Z
 622:	fe 01       	movw	r30, r28
 624:	e3 5f       	subi	r30, 0xF3	; 243
 626:	fe 4f       	sbci	r31, 0xFE	; 254
 628:	80 81       	ld	r24, Z
 62a:	fe 01       	movw	r30, r28
 62c:	e5 5f       	subi	r30, 0xF5	; 245
 62e:	fe 4f       	sbci	r31, 0xFE	; 254
 630:	80 81       	ld	r24, Z
					shiftPath();
 632:	0e 94 7d 02 	call	0x4fa	; 0x4fa <shiftPath>
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
				if(path[i] == 'U'){
					isDone = false;
 636:	91 2f       	mov	r25, r17
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
 638:	21 97       	sbiw	r28, 0x01	; 1
 63a:	48 f7       	brcc	.-46     	; 0x60e <main+0xac>
		}
	}
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
 63c:	99 23       	and	r25, r25
 63e:	01 f3       	breq	.-64     	; 0x600 <main+0x9e>
	if(power_right > 200)
	{
		
		power_right = 0;
	}
	OCR0B = power_right;
 640:	18 bc       	out	0x28, r1	; 40
	OCR2B = power_left;
 642:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		}
		
		set_motor_power(0,0);
		
		//start bot again with pre-programmed path when sees mid 3 dark
		pathIndex = 0;
 646:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 64a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		DDRB= 0xCE;
 64e:	8e ec       	ldi	r24, 0xCE	; 206
 650:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x31;
 652:	81 e3       	ldi	r24, 0x31	; 49
 654:	85 b9       	out	0x05, r24	; 5
		
		notButtonPress = ((int)(PINB & (1 << 4)) == 1 << 4) || ((int)(PINB & (1 << 5)) == 1 << 5) || ((int)(PINB & (1 << 1)) == 1 << 1);
 656:	1c 99       	sbic	0x03, 4	; 3
 658:	06 c0       	rjmp	.+12     	; 0x666 <main+0x104>
 65a:	1d 99       	sbic	0x03, 5	; 3
 65c:	06 c0       	rjmp	.+12     	; 0x66a <main+0x108>
 65e:	83 b1       	in	r24, 0x03	; 3
 660:	86 95       	lsr	r24
 662:	81 70       	andi	r24, 0x01	; 1
 664:	03 c0       	rjmp	.+6      	; 0x66c <main+0x10a>
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	01 c0       	rjmp	.+2      	; 0x66c <main+0x10a>
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	81 70       	andi	r24, 0x01	; 1
 66e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <notButtonPress>
		
		while(true){//placed at start
			notButtonPress = ((int)(PINB & (1 << 4)) == 1 << 4) || ((int)(PINB & (1 << 5)) == 1 << 5) || ((int)(PINB & (1 << 1)) == 1 << 1);
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	1c 99       	sbic	0x03, 4	; 3
 676:	06 c0       	rjmp	.+12     	; 0x684 <main+0x122>
 678:	1d 99       	sbic	0x03, 5	; 3
 67a:	06 c0       	rjmp	.+12     	; 0x688 <main+0x126>
 67c:	83 b1       	in	r24, 0x03	; 3
 67e:	86 95       	lsr	r24
 680:	81 70       	andi	r24, 0x01	; 1
 682:	03 c0       	rjmp	.+6      	; 0x68a <main+0x128>
 684:	89 2f       	mov	r24, r25
 686:	01 c0       	rjmp	.+2      	; 0x68a <main+0x128>
 688:	89 2f       	mov	r24, r25
 68a:	81 70       	andi	r24, 0x01	; 1
 68c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <notButtonPress>
		}
 690:	f1 cf       	rjmp	.-30     	; 0x674 <main+0x112>

00000692 <__fixsfsi>:
 692:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
 696:	68 94       	set
 698:	b1 11       	cpse	r27, r1
 69a:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_szero>
 69e:	08 95       	ret

000006a0 <__fixunssfsi>:
 6a0:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_splitA>
 6a4:	88 f0       	brcs	.+34     	; 0x6c8 <__fixunssfsi+0x28>
 6a6:	9f 57       	subi	r25, 0x7F	; 127
 6a8:	98 f0       	brcs	.+38     	; 0x6d0 <__fixunssfsi+0x30>
 6aa:	b9 2f       	mov	r27, r25
 6ac:	99 27       	eor	r25, r25
 6ae:	b7 51       	subi	r27, 0x17	; 23
 6b0:	b0 f0       	brcs	.+44     	; 0x6de <__fixunssfsi+0x3e>
 6b2:	e1 f0       	breq	.+56     	; 0x6ec <__fixunssfsi+0x4c>
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	1a f0       	brmi	.+6      	; 0x6c4 <__fixunssfsi+0x24>
 6be:	ba 95       	dec	r27
 6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__fixunssfsi+0x14>
 6c2:	14 c0       	rjmp	.+40     	; 0x6ec <__fixunssfsi+0x4c>
 6c4:	b1 30       	cpi	r27, 0x01	; 1
 6c6:	91 f0       	breq	.+36     	; 0x6ec <__fixunssfsi+0x4c>
 6c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_zero>
 6cc:	b1 e0       	ldi	r27, 0x01	; 1
 6ce:	08 95       	ret
 6d0:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_zero>
 6d4:	67 2f       	mov	r22, r23
 6d6:	78 2f       	mov	r23, r24
 6d8:	88 27       	eor	r24, r24
 6da:	b8 5f       	subi	r27, 0xF8	; 248
 6dc:	39 f0       	breq	.+14     	; 0x6ec <__fixunssfsi+0x4c>
 6de:	b9 3f       	cpi	r27, 0xF9	; 249
 6e0:	cc f3       	brlt	.-14     	; 0x6d4 <__fixunssfsi+0x34>
 6e2:	86 95       	lsr	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b3 95       	inc	r27
 6ea:	d9 f7       	brne	.-10     	; 0x6e2 <__fixunssfsi+0x42>
 6ec:	3e f4       	brtc	.+14     	; 0x6fc <__fixunssfsi+0x5c>
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__floatunsisf>:
 6fe:	e8 94       	clt
 700:	09 c0       	rjmp	.+18     	; 0x714 <__floatsisf+0x12>

00000702 <__floatsisf>:
 702:	97 fb       	bst	r25, 7
 704:	3e f4       	brtc	.+14     	; 0x714 <__floatsisf+0x12>
 706:	90 95       	com	r25
 708:	80 95       	com	r24
 70a:	70 95       	com	r23
 70c:	61 95       	neg	r22
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	99 23       	and	r25, r25
 716:	a9 f0       	breq	.+42     	; 0x742 <__floatsisf+0x40>
 718:	f9 2f       	mov	r31, r25
 71a:	96 e9       	ldi	r25, 0x96	; 150
 71c:	bb 27       	eor	r27, r27
 71e:	93 95       	inc	r25
 720:	f6 95       	lsr	r31
 722:	87 95       	ror	r24
 724:	77 95       	ror	r23
 726:	67 95       	ror	r22
 728:	b7 95       	ror	r27
 72a:	f1 11       	cpse	r31, r1
 72c:	f8 cf       	rjmp	.-16     	; 0x71e <__floatsisf+0x1c>
 72e:	fa f4       	brpl	.+62     	; 0x76e <__floatsisf+0x6c>
 730:	bb 0f       	add	r27, r27
 732:	11 f4       	brne	.+4      	; 0x738 <__floatsisf+0x36>
 734:	60 ff       	sbrs	r22, 0
 736:	1b c0       	rjmp	.+54     	; 0x76e <__floatsisf+0x6c>
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	16 c0       	rjmp	.+44     	; 0x76e <__floatsisf+0x6c>
 742:	88 23       	and	r24, r24
 744:	11 f0       	breq	.+4      	; 0x74a <__floatsisf+0x48>
 746:	96 e9       	ldi	r25, 0x96	; 150
 748:	11 c0       	rjmp	.+34     	; 0x76c <__floatsisf+0x6a>
 74a:	77 23       	and	r23, r23
 74c:	21 f0       	breq	.+8      	; 0x756 <__floatsisf+0x54>
 74e:	9e e8       	ldi	r25, 0x8E	; 142
 750:	87 2f       	mov	r24, r23
 752:	76 2f       	mov	r23, r22
 754:	05 c0       	rjmp	.+10     	; 0x760 <__floatsisf+0x5e>
 756:	66 23       	and	r22, r22
 758:	71 f0       	breq	.+28     	; 0x776 <__floatsisf+0x74>
 75a:	96 e8       	ldi	r25, 0x86	; 134
 75c:	86 2f       	mov	r24, r22
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	2a f0       	brmi	.+10     	; 0x76e <__floatsisf+0x6c>
 764:	9a 95       	dec	r25
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	da f7       	brpl	.-10     	; 0x764 <__floatsisf+0x62>
 76e:	88 0f       	add	r24, r24
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	97 f9       	bld	r25, 7
 776:	08 95       	ret

00000778 <__fp_split3>:
 778:	57 fd       	sbrc	r21, 7
 77a:	90 58       	subi	r25, 0x80	; 128
 77c:	44 0f       	add	r20, r20
 77e:	55 1f       	adc	r21, r21
 780:	59 f0       	breq	.+22     	; 0x798 <__fp_splitA+0x10>
 782:	5f 3f       	cpi	r21, 0xFF	; 255
 784:	71 f0       	breq	.+28     	; 0x7a2 <__fp_splitA+0x1a>
 786:	47 95       	ror	r20

00000788 <__fp_splitA>:
 788:	88 0f       	add	r24, r24
 78a:	97 fb       	bst	r25, 7
 78c:	99 1f       	adc	r25, r25
 78e:	61 f0       	breq	.+24     	; 0x7a8 <__fp_splitA+0x20>
 790:	9f 3f       	cpi	r25, 0xFF	; 255
 792:	79 f0       	breq	.+30     	; 0x7b2 <__fp_splitA+0x2a>
 794:	87 95       	ror	r24
 796:	08 95       	ret
 798:	12 16       	cp	r1, r18
 79a:	13 06       	cpc	r1, r19
 79c:	14 06       	cpc	r1, r20
 79e:	55 1f       	adc	r21, r21
 7a0:	f2 cf       	rjmp	.-28     	; 0x786 <__fp_split3+0xe>
 7a2:	46 95       	lsr	r20
 7a4:	f1 df       	rcall	.-30     	; 0x788 <__fp_splitA>
 7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <__fp_splitA+0x30>
 7a8:	16 16       	cp	r1, r22
 7aa:	17 06       	cpc	r1, r23
 7ac:	18 06       	cpc	r1, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	f1 cf       	rjmp	.-30     	; 0x794 <__fp_splitA+0xc>
 7b2:	86 95       	lsr	r24
 7b4:	71 05       	cpc	r23, r1
 7b6:	61 05       	cpc	r22, r1
 7b8:	08 94       	sec
 7ba:	08 95       	ret

000007bc <__fp_zero>:
 7bc:	e8 94       	clt

000007be <__fp_szero>:
 7be:	bb 27       	eor	r27, r27
 7c0:	66 27       	eor	r22, r22
 7c2:	77 27       	eor	r23, r23
 7c4:	cb 01       	movw	r24, r22
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret

000007ca <__mulsf3>:
 7ca:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__mulsf3x>
 7ce:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_round>
 7d2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_pscA>
 7d6:	38 f0       	brcs	.+14     	; 0x7e6 <__mulsf3+0x1c>
 7d8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_pscB>
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__mulsf3+0x1c>
 7de:	95 23       	and	r25, r21
 7e0:	11 f0       	breq	.+4      	; 0x7e6 <__mulsf3+0x1c>
 7e2:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_inf>
 7e6:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__fp_nan>
 7ea:	11 24       	eor	r1, r1
 7ec:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_szero>

000007f0 <__mulsf3x>:
 7f0:	0e 94 bc 03 	call	0x778	; 0x778 <__fp_split3>
 7f4:	70 f3       	brcs	.-36     	; 0x7d2 <__mulsf3+0x8>

000007f6 <__mulsf3_pse>:
 7f6:	95 9f       	mul	r25, r21
 7f8:	c1 f3       	breq	.-16     	; 0x7ea <__mulsf3+0x20>
 7fa:	95 0f       	add	r25, r21
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	55 1f       	adc	r21, r21
 800:	62 9f       	mul	r22, r18
 802:	f0 01       	movw	r30, r0
 804:	72 9f       	mul	r23, r18
 806:	bb 27       	eor	r27, r27
 808:	f0 0d       	add	r31, r0
 80a:	b1 1d       	adc	r27, r1
 80c:	63 9f       	mul	r22, r19
 80e:	aa 27       	eor	r26, r26
 810:	f0 0d       	add	r31, r0
 812:	b1 1d       	adc	r27, r1
 814:	aa 1f       	adc	r26, r26
 816:	64 9f       	mul	r22, r20
 818:	66 27       	eor	r22, r22
 81a:	b0 0d       	add	r27, r0
 81c:	a1 1d       	adc	r26, r1
 81e:	66 1f       	adc	r22, r22
 820:	82 9f       	mul	r24, r18
 822:	22 27       	eor	r18, r18
 824:	b0 0d       	add	r27, r0
 826:	a1 1d       	adc	r26, r1
 828:	62 1f       	adc	r22, r18
 82a:	73 9f       	mul	r23, r19
 82c:	b0 0d       	add	r27, r0
 82e:	a1 1d       	adc	r26, r1
 830:	62 1f       	adc	r22, r18
 832:	83 9f       	mul	r24, r19
 834:	a0 0d       	add	r26, r0
 836:	61 1d       	adc	r22, r1
 838:	22 1f       	adc	r18, r18
 83a:	74 9f       	mul	r23, r20
 83c:	33 27       	eor	r19, r19
 83e:	a0 0d       	add	r26, r0
 840:	61 1d       	adc	r22, r1
 842:	23 1f       	adc	r18, r19
 844:	84 9f       	mul	r24, r20
 846:	60 0d       	add	r22, r0
 848:	21 1d       	adc	r18, r1
 84a:	82 2f       	mov	r24, r18
 84c:	76 2f       	mov	r23, r22
 84e:	6a 2f       	mov	r22, r26
 850:	11 24       	eor	r1, r1
 852:	9f 57       	subi	r25, 0x7F	; 127
 854:	50 40       	sbci	r21, 0x00	; 0
 856:	9a f0       	brmi	.+38     	; 0x87e <__mulsf3_pse+0x88>
 858:	f1 f0       	breq	.+60     	; 0x896 <__mulsf3_pse+0xa0>
 85a:	88 23       	and	r24, r24
 85c:	4a f0       	brmi	.+18     	; 0x870 <__mulsf3_pse+0x7a>
 85e:	ee 0f       	add	r30, r30
 860:	ff 1f       	adc	r31, r31
 862:	bb 1f       	adc	r27, r27
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	91 50       	subi	r25, 0x01	; 1
 86c:	50 40       	sbci	r21, 0x00	; 0
 86e:	a9 f7       	brne	.-22     	; 0x85a <__mulsf3_pse+0x64>
 870:	9e 3f       	cpi	r25, 0xFE	; 254
 872:	51 05       	cpc	r21, r1
 874:	80 f0       	brcs	.+32     	; 0x896 <__mulsf3_pse+0xa0>
 876:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_inf>
 87a:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_szero>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	e4 f3       	brlt	.-8      	; 0x87a <__mulsf3_pse+0x84>
 882:	98 3e       	cpi	r25, 0xE8	; 232
 884:	d4 f3       	brlt	.-12     	; 0x87a <__mulsf3_pse+0x84>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b7 95       	ror	r27
 88e:	f7 95       	ror	r31
 890:	e7 95       	ror	r30
 892:	9f 5f       	subi	r25, 0xFF	; 255
 894:	c1 f7       	brne	.-16     	; 0x886 <__mulsf3_pse+0x90>
 896:	fe 2b       	or	r31, r30
 898:	88 0f       	add	r24, r24
 89a:	91 1d       	adc	r25, r1
 89c:	96 95       	lsr	r25
 89e:	87 95       	ror	r24
 8a0:	97 f9       	bld	r25, 7
 8a2:	08 95       	ret

000008a4 <__fp_inf>:
 8a4:	97 f9       	bld	r25, 7
 8a6:	9f 67       	ori	r25, 0x7F	; 127
 8a8:	80 e8       	ldi	r24, 0x80	; 128
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	08 95       	ret

000008b0 <__fp_nan>:
 8b0:	9f ef       	ldi	r25, 0xFF	; 255
 8b2:	80 ec       	ldi	r24, 0xC0	; 192
 8b4:	08 95       	ret

000008b6 <__fp_pscA>:
 8b6:	00 24       	eor	r0, r0
 8b8:	0a 94       	dec	r0
 8ba:	16 16       	cp	r1, r22
 8bc:	17 06       	cpc	r1, r23
 8be:	18 06       	cpc	r1, r24
 8c0:	09 06       	cpc	r0, r25
 8c2:	08 95       	ret

000008c4 <__fp_pscB>:
 8c4:	00 24       	eor	r0, r0
 8c6:	0a 94       	dec	r0
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	14 06       	cpc	r1, r20
 8ce:	05 06       	cpc	r0, r21
 8d0:	08 95       	ret

000008d2 <__fp_round>:
 8d2:	09 2e       	mov	r0, r25
 8d4:	03 94       	inc	r0
 8d6:	00 0c       	add	r0, r0
 8d8:	11 f4       	brne	.+4      	; 0x8de <__fp_round+0xc>
 8da:	88 23       	and	r24, r24
 8dc:	52 f0       	brmi	.+20     	; 0x8f2 <__fp_round+0x20>
 8de:	bb 0f       	add	r27, r27
 8e0:	40 f4       	brcc	.+16     	; 0x8f2 <__fp_round+0x20>
 8e2:	bf 2b       	or	r27, r31
 8e4:	11 f4       	brne	.+4      	; 0x8ea <__fp_round+0x18>
 8e6:	60 ff       	sbrs	r22, 0
 8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__fp_round+0x20>
 8ea:	6f 5f       	subi	r22, 0xFF	; 255
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	8f 4f       	sbci	r24, 0xFF	; 255
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
 8f2:	08 95       	ret

000008f4 <_exit>:
 8f4:	f8 94       	cli

000008f6 <__stop_program>:
 8f6:	ff cf       	rjmp	.-2      	; 0x8f6 <__stop_program>
