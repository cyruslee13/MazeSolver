
Sensimotor2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  000007fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b01  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f0  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fc  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 31       	cpi	r26, 0x17	; 23
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 02 01 	call	0x204	; 0x204 <main>
  88:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <motors_init>:
	//  clock is 20 MHz, so we define our own longer delay
	//  routine based on _delay_ms()
	
	unsigned int i;
	
	for (i = 0; i < time_ms; i++)
  90:	83 ef       	ldi	r24, 0xF3	; 243
  92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  96:	84 bd       	out	0x24, r24	; 36
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  9e:	85 bd       	out	0x25, r24	; 37
  a0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
  a4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  a8:	18 bc       	out	0x28, r1	; 40
  aa:	17 bc       	out	0x27, r1	; 39
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	88 66       	ori	r24, 0x68	; 104
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	23 9a       	sbi	0x04, 3	; 4
  b4:	08 95       	ret

000000b6 <read_sensors>:
//volatile int count3;
//volatile int count4;

volatile int* read_sensors(){
	
	lightDarkBits[5];
  b6:	e2 e1       	ldi	r30, 0x12	; 18
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	85 81       	ldd	r24, Z+5	; 0x05
	for (int i = 0; i < 5; ++i){
		lightDarkBits[i] = false;
  bc:	10 82       	st	Z, r1
  be:	11 82       	std	Z+1, r1	; 0x01
  c0:	12 82       	std	Z+2, r1	; 0x02
  c2:	13 82       	std	Z+3, r1	; 0x03
  c4:	14 82       	std	Z+4, r1	; 0x04
	}
	
	DDRC = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
  ca:	18 b8       	out	0x08, r1	; 8
	
	PORTC = 0x1F; //Charge
  cc:	8f e1       	ldi	r24, 0x1F	; 31
  ce:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <read_sensors+0x1c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <read_sensors+0x22>
	_delay_us(10);
	
	PORTC = 0x20;//Turn on LEDs
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	88 b9       	out	0x08, r24	; 8
	DDRC = 0x20;//Stop charging
  dc:	87 b9       	out	0x07, r24	; 7
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <read_sensors+0x2c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <read_sensors+0x32>
  e8:	00 00       	nop
	
	
	_delay_us(400);
	
	int values = PINC;
  ea:	86 b1       	in	r24, 0x06	; 6
	lightDarkBits[0] = ((int)(values&(1<<0)) == 1<<0);
  ec:	98 2f       	mov	r25, r24
  ee:	91 70       	andi	r25, 0x01	; 1
  f0:	90 83       	st	Z, r25
	lightDarkBits[1] = ((int)(values&(1<<1)) == 1<<1);
  f2:	81 fb       	bst	r24, 1
  f4:	99 27       	eor	r25, r25
  f6:	90 f9       	bld	r25, 0
  f8:	91 83       	std	Z+1, r25	; 0x01
	lightDarkBits[2] = ((int)(values&(1<<2)) == 1<<2);
  fa:	82 fb       	bst	r24, 2
  fc:	99 27       	eor	r25, r25
  fe:	90 f9       	bld	r25, 0
 100:	92 83       	std	Z+2, r25	; 0x02
	lightDarkBits[3] = ((int)(values&(1<<3)) == 1<<3);
 102:	83 fb       	bst	r24, 3
 104:	99 27       	eor	r25, r25
 106:	90 f9       	bld	r25, 0
 108:	93 83       	std	Z+3, r25	; 0x03
	lightDarkBits[4] = ((int)(values&(1<<4)) == 1<<4);
 10a:	82 95       	swap	r24
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	84 83       	std	Z+4, r24	; 0x04
	//}
	//}
	//}
	//return lightDarkBits;
	
}
 110:	08 95       	ret

00000112 <__vector_4>:

ISR(PCINT1_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
	//previous0 = PINC0;
	//previous1 = PINC1;
	//previous2 = PINC2;
	//previous3 = PINC3;
	//previous4 = PINC4;
	int isrPrevious = previous;
 130:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 134:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
	previous = PINC;
 138:	26 b1       	in	r18, 0x06	; 6
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 140:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>

	
	long timerVal = TCNT1;
 144:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 148:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	
	test1 = isrPrevious&(1<<0);
 14c:	ca 01       	movw	r24, r20
 14e:	81 70       	andi	r24, 0x01	; 1
 150:	99 27       	eor	r25, r25
 152:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <test1+0x1>
 156:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <test1>
	test2 = previous&(1<<0);
 15a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 15e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 162:	21 70       	andi	r18, 0x01	; 1
 164:	33 27       	eor	r19, r19
 166:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <test2+0x1>
 16a:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <test2>
	
	if((int)(isrPrevious&(1<<0)) != (int)(previous&(1<<0))){
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 172:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 176:	84 27       	eor	r24, r20
 178:	95 27       	eor	r25, r21
 17a:	80 ff       	sbrs	r24, 0
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <__vector_4+0x94>
		if(timerVal < LD_THRESHOLD){
 17e:	cb 01       	movw	r24, r22
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	81 15       	cp	r24, r1
 186:	95 40       	sbci	r25, 0x05	; 5
 188:	a1 05       	cpc	r26, r1
 18a:	b1 05       	cpc	r27, r1
 18c:	14 f4       	brge	.+4      	; 0x192 <__vector_4+0x80>
			lightDarkBits[0] = 0;
 18e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lightDarkBits>
		}
		hasItBeenReadYet[0] = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <hasItBeenReadYet+0x1>
 19a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hasItBeenReadYet>
		count0 = timerVal;
 19e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <count0+0x1>
 1a2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <count0>
	//}
	//hasItBeenReadYet[4] = 1;
	//count4 = timerVal;
	//}
	
}
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	for (int i = 0; i < 5; ++i){
		hasItBeenReadYet[i] = 1;
 1d6:	e2 e0       	ldi	r30, 0x02	; 2
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	80 83       	st	Z, r24
 1e2:	93 83       	std	Z+3, r25	; 0x03
 1e4:	82 83       	std	Z+2, r24	; 0x02
 1e6:	95 83       	std	Z+5, r25	; 0x05
 1e8:	84 83       	std	Z+4, r24	; 0x04
 1ea:	97 83       	std	Z+7, r25	; 0x07
 1ec:	86 83       	std	Z+6, r24	; 0x06
 1ee:	91 87       	std	Z+9, r25	; 0x09
 1f0:	80 87       	std	Z+8, r24	; 0x08
	}
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <main>:


int main()
{
	// Initialize motors
	motors_init();
 204:	0e 94 48 00 	call	0x90	; 0x90 <motors_init>
volatile int test1;
volatile int test2;

void set_motor_power(unsigned int power_left, unsigned int power_right)
{
	OCR0B = power_right;
 208:	89 e1       	ldi	r24, 0x19	; 25
 20a:	88 bd       	out	0x28, r24	; 40
	OCR2B = power_left;
 20c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	float kI = 0;
	float kD = 0;
	
	// Variables to store calculated PID values
	int derivative;
	int integral = 0;
 210:	e1 2c       	mov	r14, r1
 212:	f1 2c       	mov	r15, r1
	
	//Initialize sensors
	//sensors_init();
	
	//volatile int* sensorReadings;
	int error = 0; // Calculated error
 214:	c1 2c       	mov	r12, r1
 216:	d1 2c       	mov	r13, r1
	
	read_sensors();
	
	last_error = error;
	//Calculate error
	if(lightDarkBits[0] == 1 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0 ){
 218:	c2 e1       	ldi	r28, 0x12	; 18
 21a:	d1 e0       	ldi	r29, 0x01	; 1
volatile int test1;
volatile int test2;

void set_motor_power(unsigned int power_left, unsigned int power_right)
{
	OCR0B = power_right;
 21c:	0f 2e       	mov	r0, r31
 21e:	f9 e1       	ldi	r31, 0x19	; 25
 220:	8f 2e       	mov	r8, r31
 222:	91 2c       	mov	r9, r1
 224:	f0 2d       	mov	r31, r0
	OCR2B = power_left;
 226:	0f 2e       	mov	r0, r31
 228:	f4 eb       	ldi	r31, 0xB4	; 180
 22a:	2f 2e       	mov	r2, r31
 22c:	31 2c       	mov	r3, r1
 22e:	f0 2d       	mov	r31, r0
 230:	0f 2e       	mov	r0, r31
 232:	f7 ee       	ldi	r31, 0xE7	; 231
 234:	af 2e       	mov	r10, r31
 236:	f0 2d       	mov	r31, r0
volatile int test1;
volatile int test2;

void set_motor_power(unsigned int power_left, unsigned int power_right)
{
	OCR0B = power_right;
 238:	0f 2e       	mov	r0, r31
 23a:	f9 e1       	ldi	r31, 0x19	; 25
 23c:	bf 2e       	mov	r11, r31
 23e:	f0 2d       	mov	r31, r0
	//  running off the end of our program
	while(1)
	{
	// Read sensors should return the byte containing whether each sensor was high or low
	
	read_sensors();
 240:	0e 94 5b 00 	call	0xb6	; 0xb6 <read_sensors>
	
	last_error = error;
	//Calculate error
	if(lightDarkBits[0] == 1 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0 ){
 244:	88 81       	ld	r24, Y
 246:	88 23       	and	r24, r24
 248:	79 f0       	breq	.+30     	; 0x268 <main+0x64>
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	81 11       	cpse	r24, r1
 24e:	0e c0       	rjmp	.+28     	; 0x26c <main+0x68>
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	81 11       	cpse	r24, r1
 254:	0d c0       	rjmp	.+26     	; 0x270 <main+0x6c>
 256:	8c 81       	ldd	r24, Y+4	; 0x04
 258:	81 11       	cpse	r24, r1
 25a:	0c c0       	rjmp	.+24     	; 0x274 <main+0x70>
	if(lightDarkBits[1] == 1){
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	81 11       	cpse	r24, r1
 260:	0b c0       	rjmp	.+22     	; 0x278 <main+0x74>
	error = 4;
	} else {
	error = 5;
 262:	05 e0       	ldi	r16, 0x05	; 5
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	0a c0       	rjmp	.+20     	; 0x27c <main+0x78>
 268:	86 01       	movw	r16, r12
 26a:	08 c0       	rjmp	.+16     	; 0x27c <main+0x78>
 26c:	86 01       	movw	r16, r12
 26e:	06 c0       	rjmp	.+12     	; 0x27c <main+0x78>
 270:	86 01       	movw	r16, r12
 272:	04 c0       	rjmp	.+8      	; 0x27c <main+0x78>
 274:	86 01       	movw	r16, r12
 276:	02 c0       	rjmp	.+4      	; 0x27c <main+0x78>
	
	last_error = error;
	//Calculate error
	if(lightDarkBits[0] == 1 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0 ){
	if(lightDarkBits[1] == 1){
	error = 4;
 278:	04 e0       	ldi	r16, 0x04	; 4
 27a:	10 e0       	ldi	r17, 0x00	; 0
	} else {
	error = 5;
	}
	}
	if(lightDarkBits[1] == 1 && lightDarkBits[0] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0){
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	88 23       	and	r24, r24
 280:	89 f0       	breq	.+34     	; 0x2a4 <main+0xa0>
 282:	88 81       	ld	r24, Y
 284:	81 11       	cpse	r24, r1
 286:	0e c0       	rjmp	.+28     	; 0x2a4 <main+0xa0>
 288:	8b 81       	ldd	r24, Y+3	; 0x03
 28a:	81 11       	cpse	r24, r1
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <main+0xa0>
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	81 11       	cpse	r24, r1
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <main+0xa0>
	if(lightDarkBits[2] == 1){
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	81 11       	cpse	r24, r1
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <main+0x9c>
	error = 1;
	} else {
	error = 2;
 29a:	02 e0       	ldi	r16, 0x02	; 2
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <main+0xa0>
	error = 5;
	}
	}
	if(lightDarkBits[1] == 1 && lightDarkBits[0] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0){
	if(lightDarkBits[2] == 1){
	error = 1;
 2a0:	01 e0       	ldi	r16, 0x01	; 1
 2a2:	10 e0       	ldi	r17, 0x00	; 0
	} else {
	error = 2;
	}
	}
	if (lightDarkBits[2] == 1 && lightDarkBits[0] == 0 && lightDarkBits[1] == 0 && lightDarkBits[4] == 0){
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	88 23       	and	r24, r24
 2a8:	71 f0       	breq	.+28     	; 0x2c6 <main+0xc2>
 2aa:	88 81       	ld	r24, Y
 2ac:	81 11       	cpse	r24, r1
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <main+0xc2>
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	81 11       	cpse	r24, r1
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <main+0xc2>
 2b6:	8c 81       	ldd	r24, Y+4	; 0x04
 2b8:	81 11       	cpse	r24, r1
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <main+0xc2>
	if(lightDarkBits[3] == 1){
 2bc:	0b 81       	ldd	r16, Y+3	; 0x03
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	11 95       	neg	r17
 2c2:	01 95       	neg	r16
 2c4:	11 09       	sbc	r17, r1
	error = -1;
	} else {
	error = 0;
	}
	}
	if (lightDarkBits[3] == 1 && lightDarkBits[0] == 0 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0){
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	88 23       	and	r24, r24
 2ca:	69 f0       	breq	.+26     	; 0x2e6 <main+0xe2>
 2cc:	88 81       	ld	r24, Y
 2ce:	81 11       	cpse	r24, r1
 2d0:	0a c0       	rjmp	.+20     	; 0x2e6 <main+0xe2>
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	81 11       	cpse	r24, r1
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <main+0xe2>
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	81 11       	cpse	r24, r1
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <main+0xe2>
	if (lightDarkBits[4] == 1){
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	81 11       	cpse	r24, r1
 2e2:	ad c0       	rjmp	.+346    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 2e4:	a9 c0       	rjmp	.+338    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	error = -4;
	} else{
	error = -2;
	}
	}
	if(lightDarkBits[4] == 1 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[0] == 0) {
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	88 23       	and	r24, r24
 2ea:	69 f0       	breq	.+26     	; 0x306 <main+0x102>
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	81 11       	cpse	r24, r1
 2f0:	0a c0       	rjmp	.+20     	; 0x306 <main+0x102>
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	81 11       	cpse	r24, r1
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <main+0x102>
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	81 11       	cpse	r24, r1
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <main+0x102>
 2fe:	88 81       	ld	r24, Y
 300:	88 23       	and	r24, r24
 302:	09 f4       	brne	.+2      	; 0x306 <main+0x102>
 304:	57 c0       	rjmp	.+174    	; 0x3b4 <main+0x1b0>
	}
	
	
	
	int derivative = error - last_error;
	integral += error;
 306:	e0 0e       	add	r14, r16
 308:	f1 1e       	adc	r15, r17
	if(feedback > max)
	feedback = max;
	if(feedback < -max)
	feedback = -max;
	
	if(error == 0){
 30a:	01 15       	cp	r16, r1
 30c:	11 05       	cpc	r17, r1
 30e:	29 f4       	brne	.+10     	; 0x31a <main+0x116>
volatile int test1;
volatile int test2;

void set_motor_power(unsigned int power_left, unsigned int power_right)
{
	OCR0B = power_right;
 310:	b8 bc       	out	0x28, r11	; 40
	OCR2B = power_left;
 312:	f1 01       	movw	r30, r2
 314:	b0 82       	st	Z, r11
 316:	68 01       	movw	r12, r16
 318:	93 cf       	rjmp	.-218    	; 0x240 <main+0x3c>
	
	
	int derivative = error - last_error;
	integral += error;
	
	int feedback = kP*error + kI*integral + kD*derivative;
 31a:	b8 01       	movw	r22, r16
 31c:	01 2e       	mov	r0, r17
 31e:	00 0c       	add	r0, r0
 320:	88 0b       	sbc	r24, r24
 322:	99 0b       	sbc	r25, r25
 324:	0e 94 ca 02 	call	0x594	; 0x594 <__floatsisf>
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 ea       	ldi	r20, 0xA0	; 160
 32e:	50 e4       	ldi	r21, 0x40	; 64
 330:	0e 94 56 03 	call	0x6ac	; 0x6ac <__mulsf3>
 334:	2b 01       	movw	r4, r22
 336:	3c 01       	movw	r6, r24
 338:	b7 01       	movw	r22, r14
 33a:	0f 2c       	mov	r0, r15
 33c:	00 0c       	add	r0, r0
 33e:	88 0b       	sbc	r24, r24
 340:	99 0b       	sbc	r25, r25
 342:	0e 94 ca 02 	call	0x594	; 0x594 <__floatsisf>
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	a9 01       	movw	r20, r18
 34c:	0e 94 56 03 	call	0x6ac	; 0x6ac <__mulsf3>
 350:	9b 01       	movw	r18, r22
 352:	ac 01       	movw	r20, r24
 354:	c3 01       	movw	r24, r6
 356:	b2 01       	movw	r22, r4
 358:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3>
 35c:	2b 01       	movw	r4, r22
 35e:	3c 01       	movw	r6, r24
 360:	b8 01       	movw	r22, r16
 362:	6c 19       	sub	r22, r12
 364:	7d 09       	sbc	r23, r13
 366:	07 2e       	mov	r0, r23
 368:	00 0c       	add	r0, r0
 36a:	88 0b       	sbc	r24, r24
 36c:	99 0b       	sbc	r25, r25
 36e:	0e 94 ca 02 	call	0x594	; 0x594 <__floatsisf>
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	a9 01       	movw	r20, r18
 378:	0e 94 56 03 	call	0x6ac	; 0x6ac <__mulsf3>
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	c3 01       	movw	r24, r6
 382:	b2 01       	movw	r22, r4
 384:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3>
 388:	0e 94 92 02 	call	0x524	; 0x524 <__fixsfsi>
 38c:	6a 31       	cpi	r22, 0x1A	; 26
 38e:	71 05       	cpc	r23, r1
 390:	0c f0       	brlt	.+2      	; 0x394 <main+0x190>
 392:	b4 01       	movw	r22, r8
 394:	67 3e       	cpi	r22, 0xE7	; 231
 396:	ff ef       	ldi	r31, 0xFF	; 255
 398:	7f 07       	cpc	r23, r31
 39a:	14 f4       	brge	.+4      	; 0x3a0 <main+0x19c>
 39c:	6a 2d       	mov	r22, r10
 39e:	7f ef       	ldi	r23, 0xFF	; 255
 3a0:	68 01       	movw	r12, r16
volatile int test1;
volatile int test2;

void set_motor_power(unsigned int power_left, unsigned int power_right)
{
	OCR0B = power_right;
 3a2:	c4 01       	movw	r24, r8
 3a4:	86 1b       	sub	r24, r22
 3a6:	97 0b       	sbc	r25, r23
 3a8:	88 bd       	out	0x28, r24	; 40
	OCR2B = power_left;
 3aa:	67 5e       	subi	r22, 0xE7	; 231
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	f1 01       	movw	r30, r2
 3b0:	60 83       	st	Z, r22
 3b2:	46 cf       	rjmp	.-372    	; 0x240 <main+0x3c>
	}
	
	
	
	int derivative = error - last_error;
	integral += error;
 3b4:	f5 e0       	ldi	r31, 0x05	; 5
 3b6:	ef 1a       	sub	r14, r31
 3b8:	f1 08       	sbc	r15, r1
	
	int feedback = kP*error + kI*integral + kD*derivative;
 3ba:	b7 01       	movw	r22, r14
 3bc:	0f 2c       	mov	r0, r15
 3be:	00 0c       	add	r0, r0
 3c0:	88 0b       	sbc	r24, r24
 3c2:	99 0b       	sbc	r25, r25
 3c4:	0e 94 ca 02 	call	0x594	; 0x594 <__floatsisf>
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	a9 01       	movw	r20, r18
 3ce:	0e 94 56 03 	call	0x6ac	; 0x6ac <__mulsf3>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	48 ec       	ldi	r20, 0xC8	; 200
 3d8:	51 e4       	ldi	r21, 0x41	; 65
 3da:	0e 94 25 02 	call	0x44a	; 0x44a <__subsf3>
 3de:	2b 01       	movw	r4, r22
 3e0:	3c 01       	movw	r6, r24
 3e2:	6b ef       	ldi	r22, 0xFB	; 251
 3e4:	7f ef       	ldi	r23, 0xFF	; 255
 3e6:	6c 19       	sub	r22, r12
 3e8:	7d 09       	sbc	r23, r13
 3ea:	07 2e       	mov	r0, r23
 3ec:	00 0c       	add	r0, r0
 3ee:	88 0b       	sbc	r24, r24
 3f0:	99 0b       	sbc	r25, r25
 3f2:	0e 94 ca 02 	call	0x594	; 0x594 <__floatsisf>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a9 01       	movw	r20, r18
 3fc:	0e 94 56 03 	call	0x6ac	; 0x6ac <__mulsf3>
 400:	9b 01       	movw	r18, r22
 402:	ac 01       	movw	r20, r24
 404:	c3 01       	movw	r24, r6
 406:	b2 01       	movw	r22, r4
 408:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3>
 40c:	0e 94 92 02 	call	0x524	; 0x524 <__fixsfsi>
 410:	6a 31       	cpi	r22, 0x1A	; 26
 412:	71 05       	cpc	r23, r1
 414:	0c f0       	brlt	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	b4 01       	movw	r22, r8
 418:	67 3e       	cpi	r22, 0xE7	; 231
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	78 07       	cpc	r23, r24
 41e:	14 f4       	brge	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	6a 2d       	mov	r22, r10
 422:	7f ef       	ldi	r23, 0xFF	; 255
	} else{
	error = -2;
	}
	}
	if(lightDarkBits[4] == 1 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[0] == 0) {
	error = -5;
 424:	0f 2e       	mov	r0, r31
 426:	fb ef       	ldi	r31, 0xFB	; 251
 428:	cf 2e       	mov	r12, r31
 42a:	dd 24       	eor	r13, r13
 42c:	da 94       	dec	r13
 42e:	f0 2d       	mov	r31, r0
 430:	b8 cf       	rjmp	.-144    	; 0x3a2 <main+0x19e>
	}
	
	
	
	int derivative = error - last_error;
	integral += error;
 432:	e0 0e       	add	r14, r16
 434:	f1 1e       	adc	r15, r17
 436:	71 cf       	rjmp	.-286    	; 0x31a <main+0x116>
	}
	if (lightDarkBits[3] == 1 && lightDarkBits[0] == 0 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0){
	if (lightDarkBits[4] == 1){
	error = -4;
	} else{
	error = -2;
 438:	0e ef       	ldi	r16, 0xFE	; 254
 43a:	1f ef       	ldi	r17, 0xFF	; 255
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	error = 0;
	}
	}
	if (lightDarkBits[3] == 1 && lightDarkBits[0] == 0 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0){
	if (lightDarkBits[4] == 1){
	error = -4;
 43e:	0c ef       	ldi	r16, 0xFC	; 252
 440:	1f ef       	ldi	r17, 0xFF	; 255
	} else{
	error = -2;
	}
	}
	if(lightDarkBits[4] == 1 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[0] == 0) {
 442:	8c 81       	ldd	r24, Y+4	; 0x04
 444:	88 23       	and	r24, r24
 446:	a9 f3       	breq	.-22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 448:	51 cf       	rjmp	.-350    	; 0x2ec <main+0xe8>

0000044a <__subsf3>:
 44a:	50 58       	subi	r21, 0x80	; 128

0000044c <__addsf3>:
 44c:	bb 27       	eor	r27, r27
 44e:	aa 27       	eor	r26, r26
 450:	0e 94 3d 02 	call	0x47a	; 0x47a <__addsf3x>
 454:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_round>
 458:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_pscA>
 45c:	38 f0       	brcs	.+14     	; 0x46c <__addsf3+0x20>
 45e:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscB>
 462:	20 f0       	brcs	.+8      	; 0x46c <__addsf3+0x20>
 464:	39 f4       	brne	.+14     	; 0x474 <__addsf3+0x28>
 466:	9f 3f       	cpi	r25, 0xFF	; 255
 468:	19 f4       	brne	.+6      	; 0x470 <__addsf3+0x24>
 46a:	26 f4       	brtc	.+8      	; 0x474 <__addsf3+0x28>
 46c:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_nan>
 470:	0e f4       	brtc	.+2      	; 0x474 <__addsf3+0x28>
 472:	e0 95       	com	r30
 474:	e7 fb       	bst	r30, 7
 476:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>

0000047a <__addsf3x>:
 47a:	e9 2f       	mov	r30, r25
 47c:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_split3>
 480:	58 f3       	brcs	.-42     	; 0x458 <__addsf3+0xc>
 482:	ba 17       	cp	r27, r26
 484:	62 07       	cpc	r22, r18
 486:	73 07       	cpc	r23, r19
 488:	84 07       	cpc	r24, r20
 48a:	95 07       	cpc	r25, r21
 48c:	20 f0       	brcs	.+8      	; 0x496 <__addsf3x+0x1c>
 48e:	79 f4       	brne	.+30     	; 0x4ae <__addsf3x+0x34>
 490:	a6 f5       	brtc	.+104    	; 0x4fa <__addsf3x+0x80>
 492:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_zero>
 496:	0e f4       	brtc	.+2      	; 0x49a <__addsf3x+0x20>
 498:	e0 95       	com	r30
 49a:	0b 2e       	mov	r0, r27
 49c:	ba 2f       	mov	r27, r26
 49e:	a0 2d       	mov	r26, r0
 4a0:	0b 01       	movw	r0, r22
 4a2:	b9 01       	movw	r22, r18
 4a4:	90 01       	movw	r18, r0
 4a6:	0c 01       	movw	r0, r24
 4a8:	ca 01       	movw	r24, r20
 4aa:	a0 01       	movw	r20, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	ff 27       	eor	r31, r31
 4b0:	59 1b       	sub	r21, r25
 4b2:	99 f0       	breq	.+38     	; 0x4da <__addsf3x+0x60>
 4b4:	59 3f       	cpi	r21, 0xF9	; 249
 4b6:	50 f4       	brcc	.+20     	; 0x4cc <__addsf3x+0x52>
 4b8:	50 3e       	cpi	r21, 0xE0	; 224
 4ba:	68 f1       	brcs	.+90     	; 0x516 <__addsf3x+0x9c>
 4bc:	1a 16       	cp	r1, r26
 4be:	f0 40       	sbci	r31, 0x00	; 0
 4c0:	a2 2f       	mov	r26, r18
 4c2:	23 2f       	mov	r18, r19
 4c4:	34 2f       	mov	r19, r20
 4c6:	44 27       	eor	r20, r20
 4c8:	58 5f       	subi	r21, 0xF8	; 248
 4ca:	f3 cf       	rjmp	.-26     	; 0x4b2 <__addsf3x+0x38>
 4cc:	46 95       	lsr	r20
 4ce:	37 95       	ror	r19
 4d0:	27 95       	ror	r18
 4d2:	a7 95       	ror	r26
 4d4:	f0 40       	sbci	r31, 0x00	; 0
 4d6:	53 95       	inc	r21
 4d8:	c9 f7       	brne	.-14     	; 0x4cc <__addsf3x+0x52>
 4da:	7e f4       	brtc	.+30     	; 0x4fa <__addsf3x+0x80>
 4dc:	1f 16       	cp	r1, r31
 4de:	ba 0b       	sbc	r27, r26
 4e0:	62 0b       	sbc	r22, r18
 4e2:	73 0b       	sbc	r23, r19
 4e4:	84 0b       	sbc	r24, r20
 4e6:	ba f0       	brmi	.+46     	; 0x516 <__addsf3x+0x9c>
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	a1 f0       	breq	.+40     	; 0x514 <__addsf3x+0x9a>
 4ec:	ff 0f       	add	r31, r31
 4ee:	bb 1f       	adc	r27, r27
 4f0:	66 1f       	adc	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	c2 f7       	brpl	.-16     	; 0x4e8 <__addsf3x+0x6e>
 4f8:	0e c0       	rjmp	.+28     	; 0x516 <__addsf3x+0x9c>
 4fa:	ba 0f       	add	r27, r26
 4fc:	62 1f       	adc	r22, r18
 4fe:	73 1f       	adc	r23, r19
 500:	84 1f       	adc	r24, r20
 502:	48 f4       	brcc	.+18     	; 0x516 <__addsf3x+0x9c>
 504:	87 95       	ror	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f7 95       	ror	r31
 50e:	9e 3f       	cpi	r25, 0xFE	; 254
 510:	08 f0       	brcs	.+2      	; 0x514 <__addsf3x+0x9a>
 512:	b0 cf       	rjmp	.-160    	; 0x474 <__addsf3+0x28>
 514:	93 95       	inc	r25
 516:	88 0f       	add	r24, r24
 518:	08 f0       	brcs	.+2      	; 0x51c <__addsf3x+0xa2>
 51a:	99 27       	eor	r25, r25
 51c:	ee 0f       	add	r30, r30
 51e:	97 95       	ror	r25
 520:	87 95       	ror	r24
 522:	08 95       	ret

00000524 <__fixsfsi>:
 524:	0e 94 99 02 	call	0x532	; 0x532 <__fixunssfsi>
 528:	68 94       	set
 52a:	b1 11       	cpse	r27, r1
 52c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 530:	08 95       	ret

00000532 <__fixunssfsi>:
 532:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_splitA>
 536:	88 f0       	brcs	.+34     	; 0x55a <__fixunssfsi+0x28>
 538:	9f 57       	subi	r25, 0x7F	; 127
 53a:	98 f0       	brcs	.+38     	; 0x562 <__fixunssfsi+0x30>
 53c:	b9 2f       	mov	r27, r25
 53e:	99 27       	eor	r25, r25
 540:	b7 51       	subi	r27, 0x17	; 23
 542:	b0 f0       	brcs	.+44     	; 0x570 <__fixunssfsi+0x3e>
 544:	e1 f0       	breq	.+56     	; 0x57e <__fixunssfsi+0x4c>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	1a f0       	brmi	.+6      	; 0x556 <__fixunssfsi+0x24>
 550:	ba 95       	dec	r27
 552:	c9 f7       	brne	.-14     	; 0x546 <__fixunssfsi+0x14>
 554:	14 c0       	rjmp	.+40     	; 0x57e <__fixunssfsi+0x4c>
 556:	b1 30       	cpi	r27, 0x01	; 1
 558:	91 f0       	breq	.+36     	; 0x57e <__fixunssfsi+0x4c>
 55a:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_zero>
 55e:	b1 e0       	ldi	r27, 0x01	; 1
 560:	08 95       	ret
 562:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_zero>
 566:	67 2f       	mov	r22, r23
 568:	78 2f       	mov	r23, r24
 56a:	88 27       	eor	r24, r24
 56c:	b8 5f       	subi	r27, 0xF8	; 248
 56e:	39 f0       	breq	.+14     	; 0x57e <__fixunssfsi+0x4c>
 570:	b9 3f       	cpi	r27, 0xF9	; 249
 572:	cc f3       	brlt	.-14     	; 0x566 <__fixunssfsi+0x34>
 574:	86 95       	lsr	r24
 576:	77 95       	ror	r23
 578:	67 95       	ror	r22
 57a:	b3 95       	inc	r27
 57c:	d9 f7       	brne	.-10     	; 0x574 <__fixunssfsi+0x42>
 57e:	3e f4       	brtc	.+14     	; 0x58e <__fixunssfsi+0x5c>
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__floatunsisf>:
 590:	e8 94       	clt
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <__floatsisf+0x12>

00000594 <__floatsisf>:
 594:	97 fb       	bst	r25, 7
 596:	3e f4       	brtc	.+14     	; 0x5a6 <__floatsisf+0x12>
 598:	90 95       	com	r25
 59a:	80 95       	com	r24
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	99 23       	and	r25, r25
 5a8:	a9 f0       	breq	.+42     	; 0x5d4 <__floatsisf+0x40>
 5aa:	f9 2f       	mov	r31, r25
 5ac:	96 e9       	ldi	r25, 0x96	; 150
 5ae:	bb 27       	eor	r27, r27
 5b0:	93 95       	inc	r25
 5b2:	f6 95       	lsr	r31
 5b4:	87 95       	ror	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b7 95       	ror	r27
 5bc:	f1 11       	cpse	r31, r1
 5be:	f8 cf       	rjmp	.-16     	; 0x5b0 <__floatsisf+0x1c>
 5c0:	fa f4       	brpl	.+62     	; 0x600 <__floatsisf+0x6c>
 5c2:	bb 0f       	add	r27, r27
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__floatsisf+0x36>
 5c6:	60 ff       	sbrs	r22, 0
 5c8:	1b c0       	rjmp	.+54     	; 0x600 <__floatsisf+0x6c>
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	16 c0       	rjmp	.+44     	; 0x600 <__floatsisf+0x6c>
 5d4:	88 23       	and	r24, r24
 5d6:	11 f0       	breq	.+4      	; 0x5dc <__floatsisf+0x48>
 5d8:	96 e9       	ldi	r25, 0x96	; 150
 5da:	11 c0       	rjmp	.+34     	; 0x5fe <__floatsisf+0x6a>
 5dc:	77 23       	and	r23, r23
 5de:	21 f0       	breq	.+8      	; 0x5e8 <__floatsisf+0x54>
 5e0:	9e e8       	ldi	r25, 0x8E	; 142
 5e2:	87 2f       	mov	r24, r23
 5e4:	76 2f       	mov	r23, r22
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <__floatsisf+0x5e>
 5e8:	66 23       	and	r22, r22
 5ea:	71 f0       	breq	.+28     	; 0x608 <__floatsisf+0x74>
 5ec:	96 e8       	ldi	r25, 0x86	; 134
 5ee:	86 2f       	mov	r24, r22
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	2a f0       	brmi	.+10     	; 0x600 <__floatsisf+0x6c>
 5f6:	9a 95       	dec	r25
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	da f7       	brpl	.-10     	; 0x5f6 <__floatsisf+0x62>
 600:	88 0f       	add	r24, r24
 602:	96 95       	lsr	r25
 604:	87 95       	ror	r24
 606:	97 f9       	bld	r25, 7
 608:	08 95       	ret

0000060a <__fp_inf>:
 60a:	97 f9       	bld	r25, 7
 60c:	9f 67       	ori	r25, 0x7F	; 127
 60e:	80 e8       	ldi	r24, 0x80	; 128
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	08 95       	ret

00000616 <__fp_nan>:
 616:	9f ef       	ldi	r25, 0xFF	; 255
 618:	80 ec       	ldi	r24, 0xC0	; 192
 61a:	08 95       	ret

0000061c <__fp_pscA>:
 61c:	00 24       	eor	r0, r0
 61e:	0a 94       	dec	r0
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	18 06       	cpc	r1, r24
 626:	09 06       	cpc	r0, r25
 628:	08 95       	ret

0000062a <__fp_pscB>:
 62a:	00 24       	eor	r0, r0
 62c:	0a 94       	dec	r0
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	14 06       	cpc	r1, r20
 634:	05 06       	cpc	r0, r21
 636:	08 95       	ret

00000638 <__fp_round>:
 638:	09 2e       	mov	r0, r25
 63a:	03 94       	inc	r0
 63c:	00 0c       	add	r0, r0
 63e:	11 f4       	brne	.+4      	; 0x644 <__fp_round+0xc>
 640:	88 23       	and	r24, r24
 642:	52 f0       	brmi	.+20     	; 0x658 <__fp_round+0x20>
 644:	bb 0f       	add	r27, r27
 646:	40 f4       	brcc	.+16     	; 0x658 <__fp_round+0x20>
 648:	bf 2b       	or	r27, r31
 64a:	11 f4       	brne	.+4      	; 0x650 <__fp_round+0x18>
 64c:	60 ff       	sbrs	r22, 0
 64e:	04 c0       	rjmp	.+8      	; 0x658 <__fp_round+0x20>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	08 95       	ret

0000065a <__fp_split3>:
 65a:	57 fd       	sbrc	r21, 7
 65c:	90 58       	subi	r25, 0x80	; 128
 65e:	44 0f       	add	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	59 f0       	breq	.+22     	; 0x67a <__fp_splitA+0x10>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	71 f0       	breq	.+28     	; 0x684 <__fp_splitA+0x1a>
 668:	47 95       	ror	r20

0000066a <__fp_splitA>:
 66a:	88 0f       	add	r24, r24
 66c:	97 fb       	bst	r25, 7
 66e:	99 1f       	adc	r25, r25
 670:	61 f0       	breq	.+24     	; 0x68a <__fp_splitA+0x20>
 672:	9f 3f       	cpi	r25, 0xFF	; 255
 674:	79 f0       	breq	.+30     	; 0x694 <__fp_splitA+0x2a>
 676:	87 95       	ror	r24
 678:	08 95       	ret
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	55 1f       	adc	r21, r21
 682:	f2 cf       	rjmp	.-28     	; 0x668 <__fp_split3+0xe>
 684:	46 95       	lsr	r20
 686:	f1 df       	rcall	.-30     	; 0x66a <__fp_splitA>
 688:	08 c0       	rjmp	.+16     	; 0x69a <__fp_splitA+0x30>
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	99 1f       	adc	r25, r25
 692:	f1 cf       	rjmp	.-30     	; 0x676 <__fp_splitA+0xc>
 694:	86 95       	lsr	r24
 696:	71 05       	cpc	r23, r1
 698:	61 05       	cpc	r22, r1
 69a:	08 94       	sec
 69c:	08 95       	ret

0000069e <__fp_zero>:
 69e:	e8 94       	clt

000006a0 <__fp_szero>:
 6a0:	bb 27       	eor	r27, r27
 6a2:	66 27       	eor	r22, r22
 6a4:	77 27       	eor	r23, r23
 6a6:	cb 01       	movw	r24, r22
 6a8:	97 f9       	bld	r25, 7
 6aa:	08 95       	ret

000006ac <__mulsf3>:
 6ac:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulsf3x>
 6b0:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_round>
 6b4:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_pscA>
 6b8:	38 f0       	brcs	.+14     	; 0x6c8 <__mulsf3+0x1c>
 6ba:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscB>
 6be:	20 f0       	brcs	.+8      	; 0x6c8 <__mulsf3+0x1c>
 6c0:	95 23       	and	r25, r21
 6c2:	11 f0       	breq	.+4      	; 0x6c8 <__mulsf3+0x1c>
 6c4:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>
 6c8:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_nan>
 6cc:	11 24       	eor	r1, r1
 6ce:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>

000006d2 <__mulsf3x>:
 6d2:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_split3>
 6d6:	70 f3       	brcs	.-36     	; 0x6b4 <__mulsf3+0x8>

000006d8 <__mulsf3_pse>:
 6d8:	95 9f       	mul	r25, r21
 6da:	c1 f3       	breq	.-16     	; 0x6cc <__mulsf3+0x20>
 6dc:	95 0f       	add	r25, r21
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	55 1f       	adc	r21, r21
 6e2:	62 9f       	mul	r22, r18
 6e4:	f0 01       	movw	r30, r0
 6e6:	72 9f       	mul	r23, r18
 6e8:	bb 27       	eor	r27, r27
 6ea:	f0 0d       	add	r31, r0
 6ec:	b1 1d       	adc	r27, r1
 6ee:	63 9f       	mul	r22, r19
 6f0:	aa 27       	eor	r26, r26
 6f2:	f0 0d       	add	r31, r0
 6f4:	b1 1d       	adc	r27, r1
 6f6:	aa 1f       	adc	r26, r26
 6f8:	64 9f       	mul	r22, r20
 6fa:	66 27       	eor	r22, r22
 6fc:	b0 0d       	add	r27, r0
 6fe:	a1 1d       	adc	r26, r1
 700:	66 1f       	adc	r22, r22
 702:	82 9f       	mul	r24, r18
 704:	22 27       	eor	r18, r18
 706:	b0 0d       	add	r27, r0
 708:	a1 1d       	adc	r26, r1
 70a:	62 1f       	adc	r22, r18
 70c:	73 9f       	mul	r23, r19
 70e:	b0 0d       	add	r27, r0
 710:	a1 1d       	adc	r26, r1
 712:	62 1f       	adc	r22, r18
 714:	83 9f       	mul	r24, r19
 716:	a0 0d       	add	r26, r0
 718:	61 1d       	adc	r22, r1
 71a:	22 1f       	adc	r18, r18
 71c:	74 9f       	mul	r23, r20
 71e:	33 27       	eor	r19, r19
 720:	a0 0d       	add	r26, r0
 722:	61 1d       	adc	r22, r1
 724:	23 1f       	adc	r18, r19
 726:	84 9f       	mul	r24, r20
 728:	60 0d       	add	r22, r0
 72a:	21 1d       	adc	r18, r1
 72c:	82 2f       	mov	r24, r18
 72e:	76 2f       	mov	r23, r22
 730:	6a 2f       	mov	r22, r26
 732:	11 24       	eor	r1, r1
 734:	9f 57       	subi	r25, 0x7F	; 127
 736:	50 40       	sbci	r21, 0x00	; 0
 738:	9a f0       	brmi	.+38     	; 0x760 <__mulsf3_pse+0x88>
 73a:	f1 f0       	breq	.+60     	; 0x778 <__mulsf3_pse+0xa0>
 73c:	88 23       	and	r24, r24
 73e:	4a f0       	brmi	.+18     	; 0x752 <__mulsf3_pse+0x7a>
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	bb 1f       	adc	r27, r27
 746:	66 1f       	adc	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	91 50       	subi	r25, 0x01	; 1
 74e:	50 40       	sbci	r21, 0x00	; 0
 750:	a9 f7       	brne	.-22     	; 0x73c <__mulsf3_pse+0x64>
 752:	9e 3f       	cpi	r25, 0xFE	; 254
 754:	51 05       	cpc	r21, r1
 756:	80 f0       	brcs	.+32     	; 0x778 <__mulsf3_pse+0xa0>
 758:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>
 75c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_szero>
 760:	5f 3f       	cpi	r21, 0xFF	; 255
 762:	e4 f3       	brlt	.-8      	; 0x75c <__mulsf3_pse+0x84>
 764:	98 3e       	cpi	r25, 0xE8	; 232
 766:	d4 f3       	brlt	.-12     	; 0x75c <__mulsf3_pse+0x84>
 768:	86 95       	lsr	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f7 95       	ror	r31
 772:	e7 95       	ror	r30
 774:	9f 5f       	subi	r25, 0xFF	; 255
 776:	c1 f7       	brne	.-16     	; 0x768 <__mulsf3_pse+0x90>
 778:	fe 2b       	or	r31, r30
 77a:	88 0f       	add	r24, r24
 77c:	91 1d       	adc	r25, r1
 77e:	96 95       	lsr	r25
 780:	87 95       	ror	r24
 782:	97 f9       	bld	r25, 7
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
