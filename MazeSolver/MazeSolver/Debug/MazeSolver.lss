
MazeSolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000848  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800100  00800100  000008bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddd  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cb  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  000028c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055d  00000000  00000000  00002ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 33       	cpi	r26, 0x31	; 49
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 41 02 	call	0x482	; 0x482 <main>
  88:	0c 94 22 04 	jmp	0x844	; 0x844 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <motors_init>:
		}
	}
	else if(first == 'R' && second == 'L'){
		return 'U';
	}
}
  90:	83 ef       	ldi	r24, 0xF3	; 243
  92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  96:	84 bd       	out	0x24, r24	; 36
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  9e:	85 bd       	out	0x25, r24	; 37
  a0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
  a4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  a8:	18 bc       	out	0x28, r1	; 40
  aa:	17 bc       	out	0x27, r1	; 39
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	88 66       	ori	r24, 0x68	; 104
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	23 9a       	sbi	0x04, 3	; 4
  b4:	08 95       	ret

000000b6 <delay_ms>:
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	69 f0       	breq	.+26     	; 0xd4 <delay_ms+0x1e>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	e7 e8       	ldi	r30, 0x87	; 135
  c0:	f3 e1       	ldi	r31, 0x13	; 19
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <delay_ms+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <delay_ms+0x12>
  c8:	00 00       	nop
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	a9 f7       	brne	.-22     	; 0xbe <delay_ms+0x8>
  d4:	08 95       	ret

000000d6 <turnLeft>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	18 bc       	out	0x28, r1	; 40
  dc:	c4 eb       	ldi	r28, 0xB4	; 180
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	18 82       	st	Y, r1
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	87 bd       	out	0x27, r24	; 39
  e6:	88 83       	st	Y, r24
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
  f0:	17 bc       	out	0x27, r1	; 39
  f2:	18 82       	st	Y, r1
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <turnRight>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	18 bc       	out	0x28, r1	; 40
 100:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	88 bd       	out	0x28, r24	; 40
 108:	c3 eb       	ldi	r28, 0xB3	; 179
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	88 83       	st	Y, r24
 10e:	84 e6       	ldi	r24, 0x64	; 100
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
 116:	18 bc       	out	0x28, r1	; 40
 118:	18 82       	st	Y, r1
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <read_sensors>:
 120:	ec e2       	ldi	r30, 0x2C	; 44
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	85 81       	ldd	r24, Z+5	; 0x05
 126:	10 82       	st	Z, r1
 128:	11 82       	std	Z+1, r1	; 0x01
 12a:	12 82       	std	Z+2, r1	; 0x02
 12c:	13 82       	std	Z+3, r1	; 0x03
 12e:	14 82       	std	Z+4, r1	; 0x04
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	87 b9       	out	0x07, r24	; 7
 134:	18 b8       	out	0x08, r1	; 8
 136:	8f e1       	ldi	r24, 0x1F	; 31
 138:	88 b9       	out	0x08, r24	; 8
 13a:	82 e4       	ldi	r24, 0x42	; 66
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <read_sensors+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <read_sensors+0x22>
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	88 b9       	out	0x08, r24	; 8
 146:	87 b9       	out	0x07, r24	; 7
 148:	8f ec       	ldi	r24, 0xCF	; 207
 14a:	97 e0       	ldi	r25, 0x07	; 7
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <read_sensors+0x2c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <read_sensors+0x32>
 152:	00 00       	nop
 154:	86 b1       	in	r24, 0x06	; 6
 156:	98 2f       	mov	r25, r24
 158:	91 70       	andi	r25, 0x01	; 1
 15a:	90 83       	st	Z, r25
 15c:	81 fb       	bst	r24, 1
 15e:	99 27       	eor	r25, r25
 160:	90 f9       	bld	r25, 0
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	82 fb       	bst	r24, 2
 166:	99 27       	eor	r25, r25
 168:	90 f9       	bld	r25, 0
 16a:	92 83       	std	Z+2, r25	; 0x02
 16c:	83 fb       	bst	r24, 3
 16e:	99 27       	eor	r25, r25
 170:	90 f9       	bld	r25, 0
 172:	93 83       	std	Z+3, r25	; 0x03
 174:	82 95       	swap	r24
 176:	81 70       	andi	r24, 0x01	; 1
 178:	84 83       	std	Z+4, r24	; 0x04
 17a:	08 95       	ret

0000017c <inch>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	88 bd       	out	0x28, r24	; 40
 184:	c4 eb       	ldi	r28, 0xB4	; 180
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	88 83       	st	Y, r24
 18a:	84 e6       	ldi	r24, 0x64	; 100
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
 192:	0e 94 90 00 	call	0x120	; 0x120 <read_sensors>
 196:	18 bc       	out	0x28, r1	; 40
 198:	18 82       	st	Y, r1
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <trackLine>:
 1a0:	89 e1       	ldi	r24, 0x19	; 25
 1a2:	88 bd       	out	0x28, r24	; 40
 1a4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 1a8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 1ac:	88 23       	and	r24, r24
 1ae:	99 f0       	breq	.+38     	; 0x1d6 <trackLine+0x36>
 1b0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 1b4:	81 11       	cpse	r24, r1
 1b6:	12 c0       	rjmp	.+36     	; 0x1dc <trackLine+0x3c>
 1b8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 1bc:	81 11       	cpse	r24, r1
 1be:	11 c0       	rjmp	.+34     	; 0x1e2 <trackLine+0x42>
 1c0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 1c4:	81 11       	cpse	r24, r1
 1c6:	10 c0       	rjmp	.+32     	; 0x1e8 <trackLine+0x48>
 1c8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 1cc:	81 11       	cpse	r24, r1
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <trackLine+0x4e>
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <trackLine+0x52>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	0b c0       	rjmp	.+22     	; 0x1f2 <trackLine+0x52>
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <trackLine+0x52>
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <trackLine+0x52>
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <trackLine+0x52>
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 1f6:	88 23       	and	r24, r24
 1f8:	a9 f0       	breq	.+42     	; 0x224 <trackLine+0x84>
 1fa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 1fe:	81 11       	cpse	r24, r1
 200:	11 c0       	rjmp	.+34     	; 0x224 <trackLine+0x84>
 202:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 206:	81 11       	cpse	r24, r1
 208:	0d c0       	rjmp	.+26     	; 0x224 <trackLine+0x84>
 20a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 20e:	81 11       	cpse	r24, r1
 210:	09 c0       	rjmp	.+18     	; 0x224 <trackLine+0x84>
 212:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 216:	81 11       	cpse	r24, r1
 218:	03 c0       	rjmp	.+6      	; 0x220 <trackLine+0x80>
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <trackLine+0x84>
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 228:	88 23       	and	r24, r24
 22a:	91 f0       	breq	.+36     	; 0x250 <trackLine+0xb0>
 22c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 230:	81 11       	cpse	r24, r1
 232:	0e c0       	rjmp	.+28     	; 0x250 <trackLine+0xb0>
 234:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 238:	81 11       	cpse	r24, r1
 23a:	0a c0       	rjmp	.+20     	; 0x250 <trackLine+0xb0>
 23c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 240:	81 11       	cpse	r24, r1
 242:	06 c0       	rjmp	.+12     	; 0x250 <trackLine+0xb0>
 244:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <lightDarkBits+0x3>
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	71 95       	neg	r23
 24c:	61 95       	neg	r22
 24e:	71 09       	sbc	r23, r1
 250:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 254:	88 23       	and	r24, r24
 256:	99 f0       	breq	.+38     	; 0x27e <trackLine+0xde>
 258:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 25c:	81 11       	cpse	r24, r1
 25e:	0f c0       	rjmp	.+30     	; 0x27e <trackLine+0xde>
 260:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 264:	81 11       	cpse	r24, r1
 266:	0b c0       	rjmp	.+22     	; 0x27e <trackLine+0xde>
 268:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 26c:	81 11       	cpse	r24, r1
 26e:	07 c0       	rjmp	.+14     	; 0x27e <trackLine+0xde>
 270:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 274:	81 11       	cpse	r24, r1
 276:	5f c0       	rjmp	.+190    	; 0x336 <trackLine+0x196>
 278:	6e ef       	ldi	r22, 0xFE	; 254
 27a:	7f ef       	ldi	r23, 0xFF	; 255
 27c:	5e c0       	rjmp	.+188    	; 0x33a <trackLine+0x19a>
 27e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 282:	88 23       	and	r24, r24
 284:	81 f0       	breq	.+32     	; 0x2a6 <trackLine+0x106>
 286:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <lightDarkBits+0x1>
 28a:	81 11       	cpse	r24, r1
 28c:	0c c0       	rjmp	.+24     	; 0x2a6 <trackLine+0x106>
 28e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 292:	81 11       	cpse	r24, r1
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <trackLine+0x106>
 296:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lightDarkBits+0x3>
 29a:	81 11       	cpse	r24, r1
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <trackLine+0x106>
 29e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 2a2:	88 23       	and	r24, r24
 2a4:	11 f1       	breq	.+68     	; 0x2ea <trackLine+0x14a>
 2a6:	61 15       	cp	r22, r1
 2a8:	71 05       	cpc	r23, r1
 2aa:	d1 f0       	breq	.+52     	; 0x2e0 <trackLine+0x140>
 2ac:	07 2e       	mov	r0, r23
 2ae:	00 0c       	add	r0, r0
 2b0:	88 0b       	sbc	r24, r24
 2b2:	99 0b       	sbc	r25, r25
 2b4:	0e 94 29 03 	call	0x652	; 0x652 <__floatsisf>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e4       	ldi	r20, 0x40	; 64
 2be:	50 e4       	ldi	r21, 0x40	; 64
 2c0:	0e 94 8d 03 	call	0x71a	; 0x71a <__mulsf3>
 2c4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__fixsfsi>
 2c8:	6a 31       	cpi	r22, 0x1A	; 26
 2ca:	71 05       	cpc	r23, r1
 2cc:	14 f0       	brlt	.+4      	; 0x2d2 <trackLine+0x132>
 2ce:	69 e1       	ldi	r22, 0x19	; 25
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	67 3e       	cpi	r22, 0xE7	; 231
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	78 07       	cpc	r23, r24
 2d8:	54 f4       	brge	.+20     	; 0x2ee <trackLine+0x14e>
 2da:	67 ee       	ldi	r22, 0xE7	; 231
 2dc:	7f ef       	ldi	r23, 0xFF	; 255
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <trackLine+0x14e>
 2e0:	89 e1       	ldi	r24, 0x19	; 25
 2e2:	88 bd       	out	0x28, r24	; 40
 2e4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 2e8:	08 95       	ret
 2ea:	61 ef       	ldi	r22, 0xF1	; 241
 2ec:	7f ef       	ldi	r23, 0xFF	; 255
 2ee:	89 e1       	ldi	r24, 0x19	; 25
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	86 1b       	sub	r24, r22
 2f4:	97 0b       	sbc	r25, r23
 2f6:	88 bd       	out	0x28, r24	; 40
 2f8:	67 5e       	subi	r22, 0xE7	; 231
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 300:	08 95       	ret
 302:	07 2e       	mov	r0, r23
 304:	00 0c       	add	r0, r0
 306:	88 0b       	sbc	r24, r24
 308:	99 0b       	sbc	r25, r25
 30a:	0e 94 29 03 	call	0x652	; 0x652 <__floatsisf>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	40 e4       	ldi	r20, 0x40	; 64
 314:	50 e4       	ldi	r21, 0x40	; 64
 316:	0e 94 8d 03 	call	0x71a	; 0x71a <__mulsf3>
 31a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__fixsfsi>
 31e:	6a 31       	cpi	r22, 0x1A	; 26
 320:	71 05       	cpc	r23, r1
 322:	14 f0       	brlt	.+4      	; 0x328 <trackLine+0x188>
 324:	69 e1       	ldi	r22, 0x19	; 25
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	67 3e       	cpi	r22, 0xE7	; 231
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	78 07       	cpc	r23, r24
 32e:	fc f6       	brge	.-66     	; 0x2ee <trackLine+0x14e>
 330:	67 ee       	ldi	r22, 0xE7	; 231
 332:	7f ef       	ldi	r23, 0xFF	; 255
 334:	dc cf       	rjmp	.-72     	; 0x2ee <trackLine+0x14e>
 336:	6c ef       	ldi	r22, 0xFC	; 252
 338:	7f ef       	ldi	r23, 0xFF	; 255
 33a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 33e:	88 23       	and	r24, r24
 340:	01 f3       	breq	.-64     	; 0x302 <trackLine+0x162>
 342:	a1 cf       	rjmp	.-190    	; 0x286 <trackLine+0xe6>

00000344 <detectIntersection>:
 344:	18 bc       	out	0x28, r1	; 40
 346:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 34a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 34e:	88 23       	and	r24, r24
 350:	f1 f0       	breq	.+60     	; 0x38e <detectIntersection+0x4a>
 352:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 356:	81 11       	cpse	r24, r1
 358:	1a c0       	rjmp	.+52     	; 0x38e <detectIntersection+0x4a>
 35a:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
 35e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 362:	81 11       	cpse	r24, r1
 364:	03 c0       	rjmp	.+6      	; 0x36c <detectIntersection+0x28>
 366:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 36a:	08 95       	ret
 36c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 370:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 374:	9c 01       	movw	r18, r24
 376:	2f 5f       	subi	r18, 0xFF	; 255
 378:	3f 4f       	sbci	r19, 0xFF	; 255
 37a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 37e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 382:	fc 01       	movw	r30, r24
 384:	e4 5f       	subi	r30, 0xF4	; 244
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	2c e4       	ldi	r18, 0x4C	; 76
 38a:	20 83       	st	Z, r18
 38c:	ff cf       	rjmp	.-2      	; 0x38c <detectIntersection+0x48>
 38e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lightDarkBits>
 392:	81 11       	cpse	r24, r1
 394:	1e c0       	rjmp	.+60     	; 0x3d2 <detectIntersection+0x8e>
 396:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lightDarkBits+0x4>
 39a:	88 23       	and	r24, r24
 39c:	d1 f0       	breq	.+52     	; 0x3d2 <detectIntersection+0x8e>
 39e:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
 3a2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <lightDarkBits+0x2>
 3a6:	81 11       	cpse	r24, r1
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <detectIntersection+0x6c>
 3aa:	0e 94 7d 00 	call	0xfa	; 0xfa <turnRight>
 3ae:	08 95       	ret
 3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 3b8:	9c 01       	movw	r18, r24
 3ba:	2f 5f       	subi	r18, 0xFF	; 255
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255
 3be:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 3c2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 3c6:	fc 01       	movw	r30, r24
 3c8:	e4 5f       	subi	r30, 0xF4	; 244
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	23 e5       	ldi	r18, 0x53	; 83
 3ce:	20 83       	st	Z, r18
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <detectIntersection+0x8c>
 3d2:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
 3d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 3de:	9c 01       	movw	r18, r24
 3e0:	2f 5f       	subi	r18, 0xFF	; 255
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
 3e4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 3e8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 3ec:	fc 01       	movw	r30, r24
 3ee:	e4 5f       	subi	r30, 0xF4	; 244
 3f0:	fe 4f       	sbci	r31, 0xFE	; 254
 3f2:	2c e4       	ldi	r18, 0x4C	; 76
 3f4:	20 83       	st	Z, r18
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <detectIntersection+0xb2>

000003f8 <uturn>:
 3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 400:	9c 01       	movw	r18, r24
 402:	2f 5f       	subi	r18, 0xFF	; 255
 404:	3f 4f       	sbci	r19, 0xFF	; 255
 406:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 40a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 40e:	fc 01       	movw	r30, r24
 410:	e4 5f       	subi	r30, 0xF4	; 244
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	25 e5       	ldi	r18, 0x55	; 85
 416:	20 83       	st	Z, r18
 418:	ff cf       	rjmp	.-2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

0000041a <shiftPath>:

void shiftPath(){

	for(int i = pathIndex - 1; i >=0; --i){
 41a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 41e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 422:	61 50       	subi	r22, 0x01	; 1
 424:	71 09       	sbc	r23, r1
 426:	62 f1       	brmi	.+88     	; 0x480 <shiftPath+0x66>
		if(path[i] = 'e'){
 428:	a5 e6       	ldi	r26, 0x65	; 101
 42a:	fb 01       	movw	r30, r22
 42c:	e4 5f       	subi	r30, 0xF4	; 244
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	a0 83       	st	Z, r26
			for(int j = i; j < pathIndex; ++j){
 432:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 436:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 43a:	68 17       	cp	r22, r24
 43c:	79 07       	cpc	r23, r25
 43e:	a4 f4       	brge	.+40     	; 0x468 <shiftPath+0x4e>
 440:	cb 01       	movw	r24, r22
				path[j] = path[j+1];
 442:	9c 01       	movw	r18, r24
 444:	2f 5f       	subi	r18, 0xFF	; 255
 446:	3f 4f       	sbci	r19, 0xFF	; 255
 448:	f9 01       	movw	r30, r18
 44a:	e4 5f       	subi	r30, 0xF4	; 244
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	40 81       	ld	r20, Z
 450:	fc 01       	movw	r30, r24
 452:	e4 5f       	subi	r30, 0xF4	; 244
 454:	fe 4f       	sbci	r31, 0xFE	; 254
 456:	40 83       	st	Z, r20

void shiftPath(){

	for(int i = pathIndex - 1; i >=0; --i){
		if(path[i] = 'e'){
			for(int j = i; j < pathIndex; ++j){
 458:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 45c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 460:	c9 01       	movw	r24, r18
 462:	24 17       	cp	r18, r20
 464:	35 07       	cpc	r19, r21
 466:	6c f3       	brlt	.-38     	; 0x442 <shiftPath+0x28>
				path[j] = path[j+1];
			}
			--pathIndex;
 468:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 46c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 476:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}

void shiftPath(){

	for(int i = pathIndex - 1; i >=0; --i){
 47a:	61 50       	subi	r22, 0x01	; 1
 47c:	71 09       	sbc	r23, r1
 47e:	a8 f6       	brcc	.-86     	; 0x42a <shiftPath+0x10>
 480:	08 95       	ret

00000482 <main>:


int main()
{
	// Initialize motors
	motors_init();
 482:	0e 94 48 00 	call	0x90	; 0x90 <motors_init>
	
	for (int i = 0; i < 30; ++i){//initialize path to empty
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
		path[i] = 'e';
 48a:	25 e6       	ldi	r18, 0x65	; 101
 48c:	fc 01       	movw	r30, r24
 48e:	e4 5f       	subi	r30, 0xF4	; 244
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	20 83       	st	Z, r18
int main()
{
	// Initialize motors
	motors_init();
	
	for (int i = 0; i < 30; ++i){//initialize path to empty
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	8e 31       	cpi	r24, 0x1E	; 30
 498:	91 05       	cpc	r25, r1
 49a:	c1 f7       	brne	.-16     	; 0x48c <main+0xa>
	while (1)
	{
		// Read sensors should return the byte containing whether each sensor was high or low
		read_sensors();

		if (lightDarkBits[0] == 1 || lightDarkBits[4] == 1)
 49c:	cc e2       	ldi	r28, 0x2C	; 44
 49e:	d1 e0       	ldi	r29, 0x01	; 1
	// loop here forever to keep the program counter from
	//  running off the end of our program
	while (1)
	{
		// Read sensors should return the byte containing whether each sensor was high or low
		read_sensors();
 4a0:	0e 94 90 00 	call	0x120	; 0x120 <read_sensors>

		if (lightDarkBits[0] == 1 || lightDarkBits[4] == 1)
 4a4:	88 81       	ld	r24, Y
 4a6:	81 11       	cpse	r24, r1
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <main+0x2e>
 4aa:	8c 81       	ldd	r24, Y+4	; 0x04
 4ac:	88 23       	and	r24, r24
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <main+0x34>
		{
			detectIntersection();
 4b0:	0e 94 a2 01 	call	0x344	; 0x344 <detectIntersection>
 4b4:	f5 cf       	rjmp	.-22     	; 0x4a0 <main+0x1e>
		}
		else if(lightDarkBits[0] == 0 && lightDarkBits[1] == 0 && lightDarkBits[2] == 0 && lightDarkBits[3] == 0 && lightDarkBits[4] == 0)
 4b6:	88 81       	ld	r24, Y
 4b8:	81 11       	cpse	r24, r1
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <main+0x56>
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	81 11       	cpse	r24, r1
 4c0:	0b c0       	rjmp	.+22     	; 0x4d8 <main+0x56>
 4c2:	8a 81       	ldd	r24, Y+2	; 0x02
 4c4:	81 11       	cpse	r24, r1
 4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <main+0x56>
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	81 11       	cpse	r24, r1
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <main+0x56>
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	81 11       	cpse	r24, r1
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <main+0x56>
		{
			uturn();
 4d4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <uturn>
		}
		else if (lightDarkBits[0] == 1 && lightDarkBits[1] == 1 && lightDarkBits[2] == 1 && lightDarkBits[3] == 1 && lightDarkBits[4] == 1){
 4d8:	88 81       	ld	r24, Y
 4da:	88 23       	and	r24, r24
 4dc:	61 f0       	breq	.+24     	; 0x4f6 <main+0x74>
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	88 23       	and	r24, r24
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <main+0x74>
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	88 23       	and	r24, r24
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <main+0x74>
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	88 23       	and	r24, r24
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <main+0x74>
 4f0:	8c 81       	ldd	r24, Y+4	; 0x04
 4f2:	81 11       	cpse	r24, r1
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <main+0x7a>
			break;
		}
		else
		{
			trackLine();
 4f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <trackLine>
 4fa:	d2 cf       	rjmp	.-92     	; 0x4a0 <main+0x1e>
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
 4fc:	11 e0       	ldi	r17, 0x01	; 1
				if(path[i] == 'U'){
					isDone = false;
 4fe:	00 e0       	ldi	r16, 0x00	; 0
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
 500:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <_edata>
 504:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <_edata+0x1>
 508:	21 97       	sbiw	r28, 0x01	; 1
 50a:	d2 f0       	brmi	.+52     	; 0x540 <main+0xbe>
 50c:	81 2f       	mov	r24, r17
				if(path[i] == 'U'){
 50e:	fe 01       	movw	r30, r28
 510:	e4 5f       	subi	r30, 0xF4	; 244
 512:	fe 4f       	sbci	r31, 0xFE	; 254
 514:	90 81       	ld	r25, Z
 516:	95 35       	cpi	r25, 0x55	; 85
 518:	79 f4       	brne	.+30     	; 0x538 <main+0xb6>
					isDone = false;
					path[i] == simplifyPath(path[i -1], path[i + 1]);
 51a:	fe 01       	movw	r30, r28
 51c:	e4 5f       	subi	r30, 0xF4	; 244
 51e:	fe 4f       	sbci	r31, 0xFE	; 254
 520:	80 81       	ld	r24, Z
 522:	fe 01       	movw	r30, r28
 524:	e3 5f       	subi	r30, 0xF3	; 243
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	80 81       	ld	r24, Z
 52a:	fe 01       	movw	r30, r28
 52c:	e5 5f       	subi	r30, 0xF5	; 245
 52e:	fe 4f       	sbci	r31, 0xFE	; 254
 530:	80 81       	ld	r24, Z
					shiftPath();
 532:	0e 94 0d 02 	call	0x41a	; 0x41a <shiftPath>
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
				if(path[i] == 'U'){
					isDone = false;
 536:	80 2f       	mov	r24, r16
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
			isDone = true;
			for(int i = pathIndex - 1; i >= 0; --i){
 538:	21 97       	sbiw	r28, 0x01	; 1
 53a:	48 f7       	brcc	.-46     	; 0x50e <main+0x8c>
		}
	}
		
		//Handle path simplification
		bool isDone = false;
		while(!isDone){
 53c:	88 23       	and	r24, r24
 53e:	01 f3       	breq	.-64     	; 0x500 <main+0x7e>
		}
		
		
		
		//start bot again with pre-programmed path when sees mid 3 dark
		pathIndex = 0;
 540:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 544:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while(!(lightDarkBits[0] == 0 && lightDarkBits[1] == 1 && lightDarkBits[2] == 1 && lightDarkBits[3] == 1 && lightDarkBits[4] == 0)){//placed at start
 548:	ec e2       	ldi	r30, 0x2C	; 44
 54a:	f1 e0       	ldi	r31, 0x01	; 1
 54c:	80 81       	ld	r24, Z
 54e:	81 11       	cpse	r24, r1
 550:	fd cf       	rjmp	.-6      	; 0x54c <main+0xca>
 552:	81 81       	ldd	r24, Z+1	; 0x01
 554:	88 23       	and	r24, r24
 556:	d1 f3       	breq	.-12     	; 0x54c <main+0xca>
 558:	82 81       	ldd	r24, Z+2	; 0x02
 55a:	88 23       	and	r24, r24
 55c:	b9 f3       	breq	.-18     	; 0x54c <main+0xca>
 55e:	83 81       	ldd	r24, Z+3	; 0x03
 560:	88 23       	and	r24, r24
 562:	a1 f3       	breq	.-24     	; 0x54c <main+0xca>
 564:	84 81       	ldd	r24, Z+4	; 0x04
 566:	81 11       	cpse	r24, r1
 568:	f1 cf       	rjmp	.-30     	; 0x54c <main+0xca>
		while (1)
		{
			// Read sensors should return the byte containing whether each sensor was high or low
			read_sensors();

			if (lightDarkBits[0] == 1 || lightDarkBits[4] == 1)
 56a:	cc e2       	ldi	r28, 0x2C	; 44
 56c:	d1 e0       	ldi	r29, 0x01	; 1
			
		}
		while (1)
		{
			// Read sensors should return the byte containing whether each sensor was high or low
			read_sensors();
 56e:	0e 94 90 00 	call	0x120	; 0x120 <read_sensors>

			if (lightDarkBits[0] == 1 || lightDarkBits[4] == 1)
 572:	88 81       	ld	r24, Y
 574:	81 11       	cpse	r24, r1
 576:	03 c0       	rjmp	.+6      	; 0x57e <main+0xfc>
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	88 23       	and	r24, r24
 57c:	e9 f0       	breq	.+58     	; 0x5b8 <main+0x136>
			{
				inch();
 57e:	0e 94 be 00 	call	0x17c	; 0x17c <inch>
				if(path[pathIndex] == 'L'){
 582:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 586:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 58a:	e4 5f       	subi	r30, 0xF4	; 244
 58c:	fe 4f       	sbci	r31, 0xFE	; 254
 58e:	80 81       	ld	r24, Z
 590:	8c 34       	cpi	r24, 0x4C	; 76
 592:	19 f4       	brne	.+6      	; 0x59a <main+0x118>
					turnLeft();
 594:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 598:	ea cf       	rjmp	.-44     	; 0x56e <main+0xec>
				}
				else if (path[pathIndex] == 'R'){
 59a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 59e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 5a2:	e4 5f       	subi	r30, 0xF4	; 244
 5a4:	fe 4f       	sbci	r31, 0xFE	; 254
 5a6:	80 81       	ld	r24, Z
 5a8:	82 35       	cpi	r24, 0x52	; 82
 5aa:	19 f4       	brne	.+6      	; 0x5b2 <main+0x130>
					turnRight();
 5ac:	0e 94 7d 00 	call	0xfa	; 0xfa <turnRight>
 5b0:	de cf       	rjmp	.-68     	; 0x56e <main+0xec>
				}
				else {
					trackLine();
 5b2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <trackLine>
 5b6:	db cf       	rjmp	.-74     	; 0x56e <main+0xec>
				}
			}
			else if (lightDarkBits[0] == 1 && lightDarkBits[1] == 1 && lightDarkBits[2] == 1 && lightDarkBits[3] == 1 && lightDarkBits[4] == 1){
 5b8:	88 81       	ld	r24, Y
 5ba:	88 23       	and	r24, r24
 5bc:	79 f0       	breq	.+30     	; 0x5dc <main+0x15a>
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	88 23       	and	r24, r24
 5c2:	61 f0       	breq	.+24     	; 0x5dc <main+0x15a>
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	88 23       	and	r24, r24
 5c8:	49 f0       	breq	.+18     	; 0x5dc <main+0x15a>
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	88 23       	and	r24, r24
 5ce:	31 f0       	breq	.+12     	; 0x5dc <main+0x15a>
 5d0:	8c 81       	ldd	r24, Y+4	; 0x04
 5d2:	88 23       	and	r24, r24
 5d4:	19 f0       	breq	.+6      	; 0x5dc <main+0x15a>



void finalEnd(){
	while(1){
		turnLeft();
 5d6:	0e 94 6b 00 	call	0xd6	; 0xd6 <turnLeft>
 5da:	fd cf       	rjmp	.-6      	; 0x5d6 <main+0x154>
			else if (lightDarkBits[0] == 1 && lightDarkBits[1] == 1 && lightDarkBits[2] == 1 && lightDarkBits[3] == 1 && lightDarkBits[4] == 1){
				finalEnd();
			}
			else
			{
				trackLine();
 5dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <trackLine>
 5e0:	c6 cf       	rjmp	.-116    	; 0x56e <main+0xec>

000005e2 <__fixsfsi>:
 5e2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__fixunssfsi>
 5e6:	68 94       	set
 5e8:	b1 11       	cpse	r27, r1
 5ea:	0c 94 87 03 	jmp	0x70e	; 0x70e <__fp_szero>
 5ee:	08 95       	ret

000005f0 <__fixunssfsi>:
 5f0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_splitA>
 5f4:	88 f0       	brcs	.+34     	; 0x618 <__fixunssfsi+0x28>
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	98 f0       	brcs	.+38     	; 0x620 <__fixunssfsi+0x30>
 5fa:	b9 2f       	mov	r27, r25
 5fc:	99 27       	eor	r25, r25
 5fe:	b7 51       	subi	r27, 0x17	; 23
 600:	b0 f0       	brcs	.+44     	; 0x62e <__fixunssfsi+0x3e>
 602:	e1 f0       	breq	.+56     	; 0x63c <__fixunssfsi+0x4c>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	1a f0       	brmi	.+6      	; 0x614 <__fixunssfsi+0x24>
 60e:	ba 95       	dec	r27
 610:	c9 f7       	brne	.-14     	; 0x604 <__fixunssfsi+0x14>
 612:	14 c0       	rjmp	.+40     	; 0x63c <__fixunssfsi+0x4c>
 614:	b1 30       	cpi	r27, 0x01	; 1
 616:	91 f0       	breq	.+36     	; 0x63c <__fixunssfsi+0x4c>
 618:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_zero>
 61c:	b1 e0       	ldi	r27, 0x01	; 1
 61e:	08 95       	ret
 620:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_zero>
 624:	67 2f       	mov	r22, r23
 626:	78 2f       	mov	r23, r24
 628:	88 27       	eor	r24, r24
 62a:	b8 5f       	subi	r27, 0xF8	; 248
 62c:	39 f0       	breq	.+14     	; 0x63c <__fixunssfsi+0x4c>
 62e:	b9 3f       	cpi	r27, 0xF9	; 249
 630:	cc f3       	brlt	.-14     	; 0x624 <__fixunssfsi+0x34>
 632:	86 95       	lsr	r24
 634:	77 95       	ror	r23
 636:	67 95       	ror	r22
 638:	b3 95       	inc	r27
 63a:	d9 f7       	brne	.-10     	; 0x632 <__fixunssfsi+0x42>
 63c:	3e f4       	brtc	.+14     	; 0x64c <__fixunssfsi+0x5c>
 63e:	90 95       	com	r25
 640:	80 95       	com	r24
 642:	70 95       	com	r23
 644:	61 95       	neg	r22
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	08 95       	ret

0000064e <__floatunsisf>:
 64e:	e8 94       	clt
 650:	09 c0       	rjmp	.+18     	; 0x664 <__floatsisf+0x12>

00000652 <__floatsisf>:
 652:	97 fb       	bst	r25, 7
 654:	3e f4       	brtc	.+14     	; 0x664 <__floatsisf+0x12>
 656:	90 95       	com	r25
 658:	80 95       	com	r24
 65a:	70 95       	com	r23
 65c:	61 95       	neg	r22
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	99 23       	and	r25, r25
 666:	a9 f0       	breq	.+42     	; 0x692 <__floatsisf+0x40>
 668:	f9 2f       	mov	r31, r25
 66a:	96 e9       	ldi	r25, 0x96	; 150
 66c:	bb 27       	eor	r27, r27
 66e:	93 95       	inc	r25
 670:	f6 95       	lsr	r31
 672:	87 95       	ror	r24
 674:	77 95       	ror	r23
 676:	67 95       	ror	r22
 678:	b7 95       	ror	r27
 67a:	f1 11       	cpse	r31, r1
 67c:	f8 cf       	rjmp	.-16     	; 0x66e <__floatsisf+0x1c>
 67e:	fa f4       	brpl	.+62     	; 0x6be <__floatsisf+0x6c>
 680:	bb 0f       	add	r27, r27
 682:	11 f4       	brne	.+4      	; 0x688 <__floatsisf+0x36>
 684:	60 ff       	sbrs	r22, 0
 686:	1b c0       	rjmp	.+54     	; 0x6be <__floatsisf+0x6c>
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	16 c0       	rjmp	.+44     	; 0x6be <__floatsisf+0x6c>
 692:	88 23       	and	r24, r24
 694:	11 f0       	breq	.+4      	; 0x69a <__floatsisf+0x48>
 696:	96 e9       	ldi	r25, 0x96	; 150
 698:	11 c0       	rjmp	.+34     	; 0x6bc <__floatsisf+0x6a>
 69a:	77 23       	and	r23, r23
 69c:	21 f0       	breq	.+8      	; 0x6a6 <__floatsisf+0x54>
 69e:	9e e8       	ldi	r25, 0x8E	; 142
 6a0:	87 2f       	mov	r24, r23
 6a2:	76 2f       	mov	r23, r22
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <__floatsisf+0x5e>
 6a6:	66 23       	and	r22, r22
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <__floatsisf+0x74>
 6aa:	96 e8       	ldi	r25, 0x86	; 134
 6ac:	86 2f       	mov	r24, r22
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	2a f0       	brmi	.+10     	; 0x6be <__floatsisf+0x6c>
 6b4:	9a 95       	dec	r25
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	88 1f       	adc	r24, r24
 6bc:	da f7       	brpl	.-10     	; 0x6b4 <__floatsisf+0x62>
 6be:	88 0f       	add	r24, r24
 6c0:	96 95       	lsr	r25
 6c2:	87 95       	ror	r24
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <__fp_split3>:
 6c8:	57 fd       	sbrc	r21, 7
 6ca:	90 58       	subi	r25, 0x80	; 128
 6cc:	44 0f       	add	r20, r20
 6ce:	55 1f       	adc	r21, r21
 6d0:	59 f0       	breq	.+22     	; 0x6e8 <__fp_splitA+0x10>
 6d2:	5f 3f       	cpi	r21, 0xFF	; 255
 6d4:	71 f0       	breq	.+28     	; 0x6f2 <__fp_splitA+0x1a>
 6d6:	47 95       	ror	r20

000006d8 <__fp_splitA>:
 6d8:	88 0f       	add	r24, r24
 6da:	97 fb       	bst	r25, 7
 6dc:	99 1f       	adc	r25, r25
 6de:	61 f0       	breq	.+24     	; 0x6f8 <__fp_splitA+0x20>
 6e0:	9f 3f       	cpi	r25, 0xFF	; 255
 6e2:	79 f0       	breq	.+30     	; 0x702 <__fp_splitA+0x2a>
 6e4:	87 95       	ror	r24
 6e6:	08 95       	ret
 6e8:	12 16       	cp	r1, r18
 6ea:	13 06       	cpc	r1, r19
 6ec:	14 06       	cpc	r1, r20
 6ee:	55 1f       	adc	r21, r21
 6f0:	f2 cf       	rjmp	.-28     	; 0x6d6 <__fp_split3+0xe>
 6f2:	46 95       	lsr	r20
 6f4:	f1 df       	rcall	.-30     	; 0x6d8 <__fp_splitA>
 6f6:	08 c0       	rjmp	.+16     	; 0x708 <__fp_splitA+0x30>
 6f8:	16 16       	cp	r1, r22
 6fa:	17 06       	cpc	r1, r23
 6fc:	18 06       	cpc	r1, r24
 6fe:	99 1f       	adc	r25, r25
 700:	f1 cf       	rjmp	.-30     	; 0x6e4 <__fp_splitA+0xc>
 702:	86 95       	lsr	r24
 704:	71 05       	cpc	r23, r1
 706:	61 05       	cpc	r22, r1
 708:	08 94       	sec
 70a:	08 95       	ret

0000070c <__fp_zero>:
 70c:	e8 94       	clt

0000070e <__fp_szero>:
 70e:	bb 27       	eor	r27, r27
 710:	66 27       	eor	r22, r22
 712:	77 27       	eor	r23, r23
 714:	cb 01       	movw	r24, r22
 716:	97 f9       	bld	r25, 7
 718:	08 95       	ret

0000071a <__mulsf3>:
 71a:	0e 94 a0 03 	call	0x740	; 0x740 <__mulsf3x>
 71e:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_round>
 722:	0e 94 03 04 	call	0x806	; 0x806 <__fp_pscA>
 726:	38 f0       	brcs	.+14     	; 0x736 <__mulsf3+0x1c>
 728:	0e 94 0a 04 	call	0x814	; 0x814 <__fp_pscB>
 72c:	20 f0       	brcs	.+8      	; 0x736 <__mulsf3+0x1c>
 72e:	95 23       	and	r25, r21
 730:	11 f0       	breq	.+4      	; 0x736 <__mulsf3+0x1c>
 732:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_inf>
 736:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_nan>
 73a:	11 24       	eor	r1, r1
 73c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__fp_szero>

00000740 <__mulsf3x>:
 740:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_split3>
 744:	70 f3       	brcs	.-36     	; 0x722 <__mulsf3+0x8>

00000746 <__mulsf3_pse>:
 746:	95 9f       	mul	r25, r21
 748:	c1 f3       	breq	.-16     	; 0x73a <__mulsf3+0x20>
 74a:	95 0f       	add	r25, r21
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	55 1f       	adc	r21, r21
 750:	62 9f       	mul	r22, r18
 752:	f0 01       	movw	r30, r0
 754:	72 9f       	mul	r23, r18
 756:	bb 27       	eor	r27, r27
 758:	f0 0d       	add	r31, r0
 75a:	b1 1d       	adc	r27, r1
 75c:	63 9f       	mul	r22, r19
 75e:	aa 27       	eor	r26, r26
 760:	f0 0d       	add	r31, r0
 762:	b1 1d       	adc	r27, r1
 764:	aa 1f       	adc	r26, r26
 766:	64 9f       	mul	r22, r20
 768:	66 27       	eor	r22, r22
 76a:	b0 0d       	add	r27, r0
 76c:	a1 1d       	adc	r26, r1
 76e:	66 1f       	adc	r22, r22
 770:	82 9f       	mul	r24, r18
 772:	22 27       	eor	r18, r18
 774:	b0 0d       	add	r27, r0
 776:	a1 1d       	adc	r26, r1
 778:	62 1f       	adc	r22, r18
 77a:	73 9f       	mul	r23, r19
 77c:	b0 0d       	add	r27, r0
 77e:	a1 1d       	adc	r26, r1
 780:	62 1f       	adc	r22, r18
 782:	83 9f       	mul	r24, r19
 784:	a0 0d       	add	r26, r0
 786:	61 1d       	adc	r22, r1
 788:	22 1f       	adc	r18, r18
 78a:	74 9f       	mul	r23, r20
 78c:	33 27       	eor	r19, r19
 78e:	a0 0d       	add	r26, r0
 790:	61 1d       	adc	r22, r1
 792:	23 1f       	adc	r18, r19
 794:	84 9f       	mul	r24, r20
 796:	60 0d       	add	r22, r0
 798:	21 1d       	adc	r18, r1
 79a:	82 2f       	mov	r24, r18
 79c:	76 2f       	mov	r23, r22
 79e:	6a 2f       	mov	r22, r26
 7a0:	11 24       	eor	r1, r1
 7a2:	9f 57       	subi	r25, 0x7F	; 127
 7a4:	50 40       	sbci	r21, 0x00	; 0
 7a6:	9a f0       	brmi	.+38     	; 0x7ce <__mulsf3_pse+0x88>
 7a8:	f1 f0       	breq	.+60     	; 0x7e6 <__mulsf3_pse+0xa0>
 7aa:	88 23       	and	r24, r24
 7ac:	4a f0       	brmi	.+18     	; 0x7c0 <__mulsf3_pse+0x7a>
 7ae:	ee 0f       	add	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	bb 1f       	adc	r27, r27
 7b4:	66 1f       	adc	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	91 50       	subi	r25, 0x01	; 1
 7bc:	50 40       	sbci	r21, 0x00	; 0
 7be:	a9 f7       	brne	.-22     	; 0x7aa <__mulsf3_pse+0x64>
 7c0:	9e 3f       	cpi	r25, 0xFE	; 254
 7c2:	51 05       	cpc	r21, r1
 7c4:	80 f0       	brcs	.+32     	; 0x7e6 <__mulsf3_pse+0xa0>
 7c6:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_inf>
 7ca:	0c 94 87 03 	jmp	0x70e	; 0x70e <__fp_szero>
 7ce:	5f 3f       	cpi	r21, 0xFF	; 255
 7d0:	e4 f3       	brlt	.-8      	; 0x7ca <__mulsf3_pse+0x84>
 7d2:	98 3e       	cpi	r25, 0xE8	; 232
 7d4:	d4 f3       	brlt	.-12     	; 0x7ca <__mulsf3_pse+0x84>
 7d6:	86 95       	lsr	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f7 95       	ror	r31
 7e0:	e7 95       	ror	r30
 7e2:	9f 5f       	subi	r25, 0xFF	; 255
 7e4:	c1 f7       	brne	.-16     	; 0x7d6 <__mulsf3_pse+0x90>
 7e6:	fe 2b       	or	r31, r30
 7e8:	88 0f       	add	r24, r24
 7ea:	91 1d       	adc	r25, r1
 7ec:	96 95       	lsr	r25
 7ee:	87 95       	ror	r24
 7f0:	97 f9       	bld	r25, 7
 7f2:	08 95       	ret

000007f4 <__fp_inf>:
 7f4:	97 f9       	bld	r25, 7
 7f6:	9f 67       	ori	r25, 0x7F	; 127
 7f8:	80 e8       	ldi	r24, 0x80	; 128
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	08 95       	ret

00000800 <__fp_nan>:
 800:	9f ef       	ldi	r25, 0xFF	; 255
 802:	80 ec       	ldi	r24, 0xC0	; 192
 804:	08 95       	ret

00000806 <__fp_pscA>:
 806:	00 24       	eor	r0, r0
 808:	0a 94       	dec	r0
 80a:	16 16       	cp	r1, r22
 80c:	17 06       	cpc	r1, r23
 80e:	18 06       	cpc	r1, r24
 810:	09 06       	cpc	r0, r25
 812:	08 95       	ret

00000814 <__fp_pscB>:
 814:	00 24       	eor	r0, r0
 816:	0a 94       	dec	r0
 818:	12 16       	cp	r1, r18
 81a:	13 06       	cpc	r1, r19
 81c:	14 06       	cpc	r1, r20
 81e:	05 06       	cpc	r0, r21
 820:	08 95       	ret

00000822 <__fp_round>:
 822:	09 2e       	mov	r0, r25
 824:	03 94       	inc	r0
 826:	00 0c       	add	r0, r0
 828:	11 f4       	brne	.+4      	; 0x82e <__fp_round+0xc>
 82a:	88 23       	and	r24, r24
 82c:	52 f0       	brmi	.+20     	; 0x842 <__fp_round+0x20>
 82e:	bb 0f       	add	r27, r27
 830:	40 f4       	brcc	.+16     	; 0x842 <__fp_round+0x20>
 832:	bf 2b       	or	r27, r31
 834:	11 f4       	brne	.+4      	; 0x83a <__fp_round+0x18>
 836:	60 ff       	sbrs	r22, 0
 838:	04 c0       	rjmp	.+8      	; 0x842 <__fp_round+0x20>
 83a:	6f 5f       	subi	r22, 0xFF	; 255
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	08 95       	ret

00000844 <_exit>:
 844:	f8 94       	cli

00000846 <__stop_program>:
 846:	ff cf       	rjmp	.-2      	; 0x846 <__stop_program>
